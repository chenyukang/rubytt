(Block 
 (Nil)
 (Nil)
 (Nil)
 (Nil)
 (Func banner
  (args: 
   (Name s))
  (body: 
   (Block 
    (Nil)))
 (Class 
  (Name AstSimplifier)
  (Nil)
   (Block 
    (Func initialize
     (args: 
      (Name filename))
     (body: 
      (Block 
       (Assign 
        (Name filename)
        (Name filename))
       (Assign 
        (Name f)
        (Nil))
       (Assign 
        (Name src)
        (Nil))
       (Nil)
       (Assign 
        (Name detected_enc)
        (Nil))
       other
       (Nil)
       (Assign 
        (Name line_starts)
        (Array 
         (Int 0)))
       (Nil)
       (Nil)))
    (Func detect_encoding
     (args: 
      (Name s))
     (body: 
      (Block 
       (Assign 
        (Name header)
        (Nil))
       other))
    (Func find_line_starts
     (body: 
      (Block 
       (Assign 
        (Name lines)
        (Nil))
       (Assign 
        (Name total)
        (Int 0))
       (Nil)))
    (Func find_docs
     (body: 
      (Block 
       (Assign 
        (Name docs)
        (Dict  ))
       (Assign 
        (Name lines)
        (Nil))
       (Assign 
        (Name first_line)
        (Name nil))
       (Assign 
        (Name current_line)
        (Int 0))
       (Assign 
        (Name accum)
        (Array ))
       (Nil)))
    (Func node_start
     (args: 
      (Name loc))
     (body: 
      (Block 
       (Assign 
        (Name line)
        (Nil))
       (Assign 
        (Name col)
        (Nil))
       (BinOp:Add 
        (Nil)
        (Name col))))
    (Func ident_end
     (args: 
      (Name start_idx))
     (body: 
      (Block 
       other
       (Assign 
        (Name idx)
        (Name start_idx))
       (While 
        (BinOp:And 
         (BinOp:Lt 
          (Name idx)
          (Nil))
         (Nil))
        (Block 
         (Assign 
          (Name idx)
          (BinOp:Add 
           (Name idx)
           (Int 1)))))
       (Name idx)))
    (Func simplify
     (body: 
      (Block 
       (Assign 
        (Name tree)
        (Nil))
       other
       (Assign 
        (Name simplified)
        (Nil))
       (Assign 
        (Name simplified)
        (Nil))
       other
       (Name simplified)))
    (Func find_locations
     (args: 
      (Name obj))
     (body: 
      (Block 
       (Func find1
        (args: 
         (Name obj))
        (body: 
         (Block 
          other))
       (Assign 
        (Array 
         (Name node)
         (Name _)
         (Name _)
         (Name _)
         (Name _))
        (Nil))
       (Name node)))
    (Func convert
     (args: 
      (Name exp))
     (body: 
      (Block 
       other))
    (Func convert_array
     (args: 
      (Name arr))
     (body: 
      (Block 
       (Nil)))
    (Func convert_when
     (args: 
      (Name exp)
      (Name value))
     (body: 
      (Block 
       other))
    (Func args_to_array
     (args: 
      (Name args))
     (body: 
      (Block 
       other))
    (Func make_string
     (args: 
      (Name content)
      (Name location))
     (body: 
      (Block 
       (Assign 
        (Name ret)
        (Dict  
         (Symbol type)
          (Symbol string)
         (Symbol id)
          (Nil)))
       other
       (Name ret)))
    (Func op
     (args: 
      (Name name))
     (body: 
      (Block 
       (Dict  
        (Symbol type)
         (Symbol op)
        (Symbol name)
         (Name name))))
    (Func negate
     (args: 
      (Name exp))
     (body: 
      (Block 
       (Dict  
        (Symbol type)
         (Symbol unary)
        (Symbol op)
         (Nil)
        (Symbol operand)
         (Name exp))))))
 (Func hash_max_nest
  (args: 
   (Name hash))
  (body: 
   (Block 
    other))
 (Func parse_dump
  (args: 
   (Name input)
   (Name output)
   (Name endmark))
  (body: 
   (Block 
    (Try 
     (Block 
      (Assign 
       (Name simplifier)
       (Nil))
      (Assign 
       (Name hash)
       (Nil))
      (Assign 
       (Name json_string)
       (Nil))
      (Assign 
       (Name out)
       (Nil))
      (Nil)
      (Nil))
     (Nil)
     (Nil)
     (Block 
      (Assign 
       (Name end_file)
       (Nil))
      (Nil)))))
 (Assign 
  (Name $options)
  (Dict  ))
 (Nil)
 other)