(Block 
 (Call require
  (args: 
   (String ripper)))
 (Call require
  (args: 
   (String pp)))
 (Call require
  (args: 
   (String json)))
 (Call require
  (args: 
   (String optparse)))
 (Func banner
  (args: 
   (Name s))
  (body: 
   (Block 
    (Call puts
     (args: 
      (BinOp:Add 
       (BinOp:Add 
        (String \033[93m)
        (Nil))
       (String :\033[0m)))))))
 (Class static: false
  (Name AstSimplifier)
  (Nil)
   (Block 
    (Func initialize
     (args: 
      (Name filename))
     (body: 
      (Block 
       (Assign 
        (Name filename)
        (Name filename))
       (Assign 
        (Name f)
        (Call 
         (Attribute 
          (Name File)
          (Name open))
         (args: 
          (Name filename)
          (String rb))))
       (Assign 
        (Name src)
        (Call 
         (Attribute 
          (Name f)
          (Name read))))
       (Call 
        (Attribute 
         (Name f)
         (Name close)))
       (Assign 
        (Name detected_enc)
        (Call detect_encoding
         (args: 
          (Name src))))
       (If 
        (Name detected_enc)
        (Block 
         (Try 
          (Block 
           (Call 
            (Attribute 
             (Name src)
             (Name force_encoding))
            (args: 
             (Name detected_enc))))
          (Handler 
            (Nil)
            (Block 
             (Call 
              (Attribute 
               (Name src)
               (Name force_encoding))
              (args: 
               (String utf-8))))
            (Nil)
          (Nil)
          (Nil)))
        (Block 
         (Call 
          (Attribute 
           (Name src)
           (Name force_encoding))
          (args: 
           (String utf-8)))))
       (Call 
        (Attribute 
         (Name src)
         (Name encode))
        (args: 
         (String utf-8)
         (Dict  
          (Symbol undef)
           (Symbol replace)
          (Symbol invalid)
           (Symbol replace)
          (Symbol universal_newline)
           (Name true))))
       (Assign 
        (Name line_starts)
        (Array 
         (Int 0)))
       (Call find_line_starts)
       (Call find_docs))))
    (Func detect_encoding
     (args: 
      (Name s))
     (body: 
      (Block 
       (Assign 
        (Name header)
        (Call 
         (Attribute 
          (Name s)
          (Name match))
         (args: 
          (String ^.*\n?.*\n?))))
       (If 
        (BinOp:And 
         (Name header)
         (Subscript 
          (Name header)
          (Int 0)))
        (Block 
         (Assign 
          (Name matched)
          (Call 
           (Attribute 
            (Subscript 
             (Name header)
             (Int 0))
            (Name match))
           (args: 
            (String ^\s*#.*coding\s*[:=]\s*([\w\d\-]+)))))
         (If 
          (BinOp:And 
           (Name matched)
           (Subscript 
            (Name matched)
            (Int 1)))
          (Block 
           (Subscript 
            (Name matched)
            (Int 1)))
          (Nil)))
        (Nil)))))
    (Func find_docs
     (body: 
      (Block 
       (Assign 
        (Name docs)
        (Dict  ))
       (Assign 
        (Name lines)
        (Call 
         (Attribute 
          (Name src)
          (Name split))
         (args: 
          other)))
       (Assign 
        (Name first_line)
        (Name nil))
       (Assign 
        (Name current_line)
        (Int 0))
       (Assign 
        (Name accum)
        (Array ))
       (Call 
        (Attribute 
         (Name lines)
         (Name each))))))
    (Func node_start
     (args: 
      (Name loc))
     (body: 
      (Block 
       (Assign 
        (Name line)
        (Subscript 
         (Name loc)
         (Int 0)))
       (Assign 
        (Name col)
        (Subscript 
         (Name loc)
         (Int 1)))
       (BinOp:Add 
        (Subscript 
         (Name line_starts)
         (BinOp:Sub 
          (Name line)
          (Int 1)))
        (Name col)))))
    (Func ident_end
     (args: 
      (Name start_idx))
     (body: 
      (Block 
       (If 
        (BinOp:And 
         (BinOp:Equal 
          (Subscript 
           (Name src)
           (Name start_idx))
          (String [))
         (BinOp:Equal 
          (Subscript 
           (Name src)
           (BinOp:Add 
            (Name start_idx)
            (Int 1)))
          (String ])))
        (Block 
         (Return 
          (Array 
           (BinOp:Add 
            (Name start_idx)
            (Int 2)))))
        (Nil))
       (Assign 
        (Name idx)
        (Name start_idx))
       (While 
        (BinOp:And 
         (Block 
          (BinOp:Lt 
           (Name idx)
           (Call 
            (Attribute 
             (Name src)
             (Name length)))))
         (Call 
          (Attribute 
           (Subscript 
            (Name src)
            (Name idx))
           (Name match))
          (args: 
           other)))
        (Block 
         (Assign 
          (Name idx)
          (BinOp:Add 
           (Name idx)
           (Int 1)))))
       (Name idx))))
    (Func simplify
     (body: 
      (Block 
       (Assign 
        (Name tree)
        (Call 
         (Attribute 
          (Call 
           (Attribute 
            (Attribute 
             (Name Ripper)
             (Name SexpBuilder))
            (Name new))
           (args: 
            (Name src)))
          (Name parse))))
       (If 
        (Subscript 
         (Name $options)
         (Symbol debug))
        (Block 
         (Call banner
          (args: 
           (String sexp)))
         (Call pp
          (args: 
           (Name tree))))
        (Nil))
       (Assign 
        (Name simplified)
        (Call convert
         (args: 
          (Name tree))))
       (Assign 
        (Name simplified)
        (Call find_locations
         (args: 
          (Name simplified))))
       (If 
        (Subscript 
         (Name $options)
         (Symbol debug))
        (Block 
         (Call banner
          (args: 
           (String simplified)))
         (Call pp
          (args: 
           (Name simplified))))
        (Nil))
       (Name simplified))))
    (Func find_locations
     (args: 
      (Name obj))
     (body: 
      (Block 
       (Func find1
        (args: 
         (Name obj))
        (body: 
         (Block 
          (If 
           (Call 
            (Attribute 
             (Name obj)
             (Name is_a?))
            (args: 
             (Name Hash)))
           (Block 
            (Assign 
             (Name ret)
             (Dict  ))
            (Assign 
             (Name whole_start)
             (Name nil))
            (Assign 
             (Name whole_end)
             (Name nil))
            (Assign 
             (Name start_line)
             (Name nil))
            (Assign 
             (Name end_line)
             (Name nil))
            (Call 
             (Attribute 
              (Name obj)
              (Name each)))
            (If 
             (Name whole_start)
             (Block 
              (If 
               (BinOp:And 
                (Call 
                 (Attribute 
                  (Array 
                   (Symbol module)
                   (Symbol class)
                   (Symbol def)
                   (Symbol lambda)
                   (Symbol if)
                   (Symbol begin)
                   (Symbol while)
                   (Symbol for))
                  (Name               .include?))
                 (args: 
                  (Subscript 
                   (Name obj)
                   (Symbol type))))
                (UnaryOp:Not 
                 (Subscript 
                  (Name obj)
                  (Symbol mod))))
               (Block 
                (Assign 
                 (Name locator)
                 (Name whole_end))
                (While 
                 (BinOp:And 
                  (BinOp:Or 
                   (BinOp:Lt 
                    (Name locator)
                    (Call 
                     (Attribute 
                      (Name src)
                      (Name length))))
                   (BinOp:Eq 
                    (Name locator)
                    (Call 
                     (Attribute 
                      (Name src)
                      (Name length)))))
                  (UnaryOp:Not 
                   (Call 
                    (Attribute 
                     (String end)
                     (Name eql?))
                    (args: 
                     (Subscript 
                      (Name src)
                      (Array 
                       (Name locator)
                       (BinOp:Sub 
                        (BinOp:Add 
                         (Name locator)
                         (Call 
                          (Attribute 
                           (String end)
                           (Name length))))
                        (Int 1))))))))
                 (Block 
                  (Assign 
                   (Name locator)
                   (BinOp:Add 
                    (Name locator)
                    (Int 1)))))
                (If 
                 (Call 
                  (Attribute 
                   (String end)
                   (Name eql?))
                  (args: 
                   (Subscript 
                    (Name src)
                    (Array 
                     (Name locator)
                     (BinOp:Sub 
                      (BinOp:Add 
                       (Name locator)
                       (Call 
                        (Attribute 
                         (String end)
                         (Name length))))
                      (Int 1))))))
                 (Block 
                  (Assign 
                   (Name whole_end)
                   (BinOp:Add 
                    (Name locator)
                    (Call 
                     (Attribute 
                      (String end)
                      (Name length))))))
                 (Nil)))
               (Nil))
              (Assign 
               (Subscript 
                (Name ret)
                (Symbol start))
               (Name whole_start))
              (Assign 
               (Subscript 
                (Name ret)
                (Symbol end))
               (Name whole_end))
              (Assign 
               (Subscript 
                (Name ret)
                (Symbol start_line))
               (Name start_line))
              (Assign 
               (Subscript 
                (Name ret)
                (Symbol end_line))
               (Name end_line))
              (If 
               (Call 
                (Attribute 
                 (Array 
                  (Symbol module)
                  (Symbol class)
                  (Symbol def))
                 (Name include?))
                (args: 
                 (Subscript 
                  (Name ret)
                  (Symbol type))))
               (Block 
                (Assign 
                 (Name doc)
                 (Subscript 
                  (Name docs)
                  (Name start_line)))
                (If 
                 (Name doc)
                 (Block 
                  (Assign 
                   (Subscript 
                    (Name ret)
                    (Symbol doc))
                   (Name doc)))
                 (Nil)))
               (Nil)))
             (Nil))
            (Return 
             (Array 
              (Name ret)
              (Name whole_start)
              (Name whole_end)
              (Name start_line)
              (Name end_line))))
           (If 
            (Call 
             (Attribute 
              (Name obj)
              (Name is_a?))
             (args: 
              (Name Array)))
            (Block 
             (Assign 
              (Name ret)
              (Array ))
             (Assign 
              (Name whole_start)
              (Name nil))
             (Assign 
              (Name whole_end)
              (Name nil))
             (For 
              (Name v)
              (Name obj)
              (Block 
               (Assign 
                (Array 
                 (Name new_node)
                 (Name start_idx)
                 (Name end_idx)
                 (Name line_start)
                 (Name line_end))
                (Call find1
                 (args: 
                  (Name v))))
               (Call 
                (Attribute 
                 (Name ret)
                 (Name push))
                (args: 
                 (Name new_node)))
               (If 
                (BinOp:And 
                 (Name start_idx)
                 (Block 
                  (BinOp:Or 
                   (UnaryOp:Not 
                    (Name whole_start))
                   (BinOp:Gt 
                    (Name whole_start)
                    (Name start_idx)))))
                (Block 
                 (Assign 
                  (Name whole_start)
                  (Name start_idx))
                 (Assign 
                  (Name start_line)
                  (Name line_start)))
                (Nil))
               (If 
                (BinOp:And 
                 (Name end_idx)
                 (Block 
                  (BinOp:Or 
                   (UnaryOp:Not 
                    (Name whole_end))
                   (BinOp:Lt 
                    (Name whole_end)
                    (Name end_idx)))))
                (Block 
                 (Assign 
                  (Name whole_end)
                  (Name end_idx))
                 (Assign 
                  (Name end_line)
                  (Name line_end)))
                (Nil))))
             (Return 
              (Array 
               (Name ret)
               (Name whole_start)
               (Name whole_end)
               (Name start_line)
               (Name end_line))))
            (Block 
             (Return 
              (Array 
               (Name obj)
               (Name nil)
               (Name nil)
               (Name nil)
               (Name nil)))))))))
       (Assign 
        (Array 
         (Name node)
         (Name _)
         (Name _)
         (Name _)
         (Name _))
        (Call find1
         (args: 
          (Name obj))))
       (Name node))))
    (Func convert_array
     (args: 
      (Name arr))
     (body: 
      (Block 
       (Call 
        (Attribute 
         (Name arr)
         (Name map))))))
    (Func convert_when
     (args: 
      (Name exp)
      (Name value))
     (body: 
      (Block 
       (If 
        (BinOp:Equal 
         (Subscript 
          (Name exp)
          (Int 0))
         (Symbol when))
        (Block 
         (If 
          (Name value)
          (Block 
           (Assign 
            (Name test)
            (Dict  
             (Symbol type)
              (Symbol binary)
             (Symbol op)
              (Call op
               (args: 
                (Symbol in)))
             (Symbol left)
              (Name value)
             (Symbol right)
              (Call args_to_array
               (args: 
                (Call convert
                 (args: 
                  (Subscript 
                   (Name exp)
                   (Int 1)))))))))
          (Block 
           (Assign 
            (Name test)
            (Call args_to_array
             (args: 
              (Call convert
               (args: 
                (Subscript 
                 (Name exp)
                 (Int 1)))))))))
         (Assign 
          (Name ret)
          (Dict  
           (Symbol type)
            (Symbol if)
           (Symbol test)
            (Name test)
           (Symbol body)
            (Call convert
             (args: 
              (Subscript 
               (Name exp)
               (Int 2))))))
         (If 
          (Subscript 
           (Name exp)
           (Int 3))
          (Block 
           (Assign 
            (Subscript 
             (Name ret)
             (Symbol else))
            (Call convert_when
             (args: 
              (Subscript 
               (Name exp)
               (Int 3))
              (Name value)))))
          (Nil))
         (Name ret))
        (If 
         (BinOp:Equal 
          (Subscript 
           (Name exp)
           (Int 0))
          (Symbol else))
         (Block 
          (Call convert
           (args: 
            (Subscript 
             (Name exp)
             (Int 1)))))
         (Nil))))))
    (Func args_to_array
     (args: 
      (Name args))
     (body: 
      (Block 
       (If 
        (BinOp:Equal 
         (Subscript 
          (Name args)
          (Symbol type))
         (Symbol args))
        (Block 
         (Dict  
          (Symbol type)
           (Symbol array)
          (Symbol elts)
           (Subscript 
            (Name args)
            (Symbol positional))))
        (Block 
         (Name args))))))
    (Func make_string
     (args: 
      (Name content)
      (Name location))
     (body: 
      (Block 
       (Assign 
        (Name ret)
        (Dict  
         (Symbol type)
          (Symbol string)
         (Symbol id)
          (Call 
           (Attribute 
            (Name content)
            (Name force_encoding))
           (args: 
            (String utf-8)))))
       (If 
        (Name location)
        (Block 
         (Assign 
          (Subscript 
           (Name ret)
           (Symbol location))
          (Name location)))
        (Nil))
       (Name ret))))
    (Func op
     (args: 
      (Name name))
     (body: 
      (Block 
       (Dict  
        (Symbol type)
         (Symbol op)
        (Symbol name)
         (Name name)))))
    (Func negate
     (args: 
      (Name exp))
     (body: 
      (Block 
       (Dict  
        (Symbol type)
         (Symbol unary)
        (Symbol op)
         (Call op
          (args: 
           (Symbol not)))
        (Symbol operand)
         (Name exp))))))))

----------------------------------------

bind: AstSimplifier ty: Class_ty: AstSimplifier
  bind: make_string ty: Func_ty: [unkown_type] => unkown_type
  bind: negate ty: Func_ty: [] => unkown_type
  bind: args_to_array ty: Func_ty: [] => unkown_type
  bind: convert_array ty: Func_ty: [] => unkown_type
  bind: ident_end ty: Func_ty: [] => Int_ty
  bind: find_locations ty: Func_ty: [] => unkown_type
  bind: detect_encoding ty: Func_ty: [] => unkown_type
  bind: simplify ty: Func_ty: [] => unkown_type
  bind: node_start ty: Func_ty: [] => unkown_type
  bind: convert_when ty: Func_ty: [] => unkown_type
  bind: find_docs ty: Func_ty: [] => unkown_type
  bind: op ty: Func_ty: [] => unkown_type
  bind: initialize ty: Func_ty: [] => unkown_type
bind: banner ty: Func_ty: [] => unkown_type
