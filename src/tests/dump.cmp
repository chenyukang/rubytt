(Block 
 (Call require
  (args: 
   (String ripper)))
 (Call require
  (args: 
   (String pp)))
 (Call require
  (args: 
   (String json)))
 (Call require
  (args: 
   (String optparse)))
 (Func banner
  (args: 
   (Name s))
  (body: 
   (Block 
    (Call puts
     (args: 
      (BinOp:Add 
       (BinOp:Add 
        (String \033[93m)
        (Nil))
       (String :\033[0m)))))))
 (Class static: false
  (Name AstSimplifier)
  (Nil)
   (Block 
    (Func initialize
     (args: 
      (Name filename))
     (body: 
      (Block 
       (Assign 
        (Name filename)
        (Name filename))
       (Assign 
        (Name f)
        (Call 
         (Attribute 
          (Name File)
          (Name open))
         (args: 
          (Name filename)
          (String rb))))
       (Assign 
        (Name src)
        (Call 
         (Attribute 
          (Name f)
          (Name read))))
       (Call 
        (Attribute 
         (Name f)
         (Name close)))
       (Assign 
        (Name detected_enc)
        (Call detect_encoding
         (args: 
          (Name src))))
       (If 
        (Name detected_enc)
        (Block 
         (Try 
          (Block 
           (Call 
            (Attribute 
             (Name src)
             (Name force_encoding))
            (args: 
             (Name detected_enc))))
          (Handler 
            (Nil)
            (Block 
             (Call 
              (Attribute 
               (Name src)
               (Name force_encoding))
              (args: 
               (String utf-8))))
            (Nil)
          (Nil)
          (Nil)))
        (Block 
         (Call 
          (Attribute 
           (Name src)
           (Name force_encoding))
          (args: 
           (String utf-8)))))
       (Call 
        (Attribute 
         (Name src)
         (Name encode))
        (args: 
         (String utf-8)
         (Dict  
          (Symbol undef)
           (Symbol replace)
          (Symbol invalid)
           (Symbol replace)
          (Symbol universal_newline)
           (Name true))))
       (Assign 
        (Name line_starts)
        (Array 
         (Int 0)))
       (Call find_line_starts)
       (Call find_docs))))
    (Func detect_encoding
     (args: 
      (Name s))
     (body: 
      (Block 
       (Assign 
        (Name header)
        (Call 
         (Attribute 
          (Name s)
          (Name match))
         (args: 
          (String ^.*\n?.*\n?))))
       (If 
        (BinOp:And 
         (Name header)
         (Subscript 
          (Name header)
          (Int 0)))
        (Block 
         (Assign 
          (Name matched)
          (Call 
           (Attribute 
            (Subscript 
             (Name header)
             (Int 0))
            (Name match))
           (args: 
            (String ^\s*#.*coding\s*[:=]\s*([\w\d\-]+)))))
         (If 
          (BinOp:And 
           (Name matched)
           (Subscript 
            (Name matched)
            (Int 1)))
          (Block 
           (Subscript 
            (Name matched)
            (Int 1)))
          (Nil)))
        (Nil)))))
    (Func find_line_starts
     (body: 
      (Block 
       (Assign 
        (Name lines)
        (Call 
         (Attribute 
          (Name src)
          (Name split))
         (args: 
          other)))
       (Assign 
        (Name total)
        (Int 0))
       (Call 
        (Attribute 
         (Name lines)
         (Name each))))))
    (Func find_docs
     (body: 
      (Block 
       (Assign 
        (Name docs)
        (Dict  ))
       (Assign 
        (Name lines)
        (Call 
         (Attribute 
          (Name src)
          (Name split))
         (args: 
          other)))
       (Assign 
        (Name first_line)
        (Name nil))
       (Assign 
        (Name current_line)
        (Int 0))
       (Assign 
        (Name accum)
        (Array ))
       (Call 
        (Attribute 
         (Name lines)
         (Name each))))))
    (Func node_start
     (args: 
      (Name loc))
     (body: 
      (Block 
       (Assign 
        (Name line)
        (Subscript 
         (Name loc)
         (Int 0)))
       (Assign 
        (Name col)
        (Subscript 
         (Name loc)
         (Int 1)))
       (BinOp:Add 
        (Subscript 
         (Name line_starts)
         (BinOp:Sub 
          (Name line)
          (Int 1)))
        (Name col)))))
    (Func ident_end
     (args: 
      (Name start_idx))
     (body: 
      (Block 
       (If 
        (BinOp:And 
         (BinOp:Equal 
          (Subscript 
           (Name src)
           (Name start_idx))
          (String [))
         (BinOp:Equal 
          (Subscript 
           (Name src)
           (BinOp:Add 
            (Name start_idx)
            (Int 1)))
          (String ])))
        (Block 
         (Return 
          (Array 
           (BinOp:Add 
            (Name start_idx)
            (Int 2)))))
        (Nil))
       (Assign 
        (Name idx)
        (Name start_idx))
       (While 
        (BinOp:And 
         (BinOp:Lt 
          (Name idx)
          (Call 
           (Attribute 
            (Name src)
            (Name length))))
         (Call 
          (Attribute 
           (Subscript 
            (Name src)
            (Name idx))
           (Name match))
          (args: 
           other)))
        (Block 
         (Assign 
          (Name idx)
          (BinOp:Add 
           (Name idx)
           (Int 1)))))
       (Name idx))))
    (Func simplify
     (body: 
      (Block 
       (Assign 
        (Name tree)
        (Call 
         (Attribute 
          (Call 
           (Attribute 
            (Attribute 
             (Name Ripper)
             (Name SexpBuilder))
            (Name new))
           (args: 
            (Name src)))
          (Name parse))))
       (If 
        (Subscript 
         (Name $options)
         (Symbol debug))
        (Block 
         (Call banner
          (args: 
           (String sexp)))
         (Call pp
          (args: 
           (Name tree))))
        (Nil))
       (Assign 
        (Name simplified)
        (Call convert
         (args: 
          (Name tree))))
       (Assign 
        (Name simplified)
        (Call find_locations
         (args: 
          (Name simplified))))
       (If 
        (Subscript 
         (Name $options)
         (Symbol debug))
        (Block 
         (Call banner
          (args: 
           (String simplified)))
         (Call pp
          (args: 
           (Name simplified))))
        (Nil))
       (Name simplified))))
    (Func args_to_array
     (args: 
      (Name args))
     (body: 
      (Block 
       (If 
        (BinOp:Equal 
         (Subscript 
          (Name args)
          (Symbol type))
         (Symbol args))
        (Block 
         (Dict  
          (Symbol type)
           (Symbol array)
          (Symbol elts)
           (Subscript 
            (Name args)
            (Symbol positional))))
        (Block 
         (Name args))))))
    (Func make_string
     (args: 
      (Name content)
      (Name location))
     (body: 
      (Block 
       (Assign 
        (Name ret)
        (Dict  
         (Symbol type)
          (Symbol string)
         (Symbol id)
          (Call 
           (Attribute 
            (Name content)
            (Name force_encoding))
           (args: 
            (String utf-8)))))
       (If 
        (Name location)
        (Block 
         (Assign 
          (Subscript 
           (Name ret)
           (Symbol location))
          (Name location)))
        (Nil))
       (Name ret))))
    (Func op
     (args: 
      (Name name))
     (body: 
      (Block 
       (Dict  
        (Symbol type)
         (Symbol op)
        (Symbol name)
         (Name name)))))
    (Func negate
     (args: 
      (Name exp))
     (body: 
      (Block 
       (Dict  
        (Symbol type)
         (Symbol unary)
        (Symbol op)
         (Call op
          (args: 
           (Symbol not)))
        (Symbol operand)
         (Name exp)))))))
 (Func parse_dump
  (args: 
   (Name input)
   (Name output)
   (Name endmark))
  (body: 
   (Block 
    (Try 
     (Block 
      (Assign 
       (Name simplifier)
       (Call 
        (Attribute 
         (Name AstSimplifier)
         (Name new))
        (args: 
         (Name input))))
      (Assign 
       (Name hash)
       (Call 
        (Attribute 
         (Name simplifier)
         (Name simplify))))
      (Assign 
       (Name json_string)
       (Call 
        (Attribute 
         (Name JSON)
         (Name pretty_generate))
        (args: 
         (Name hash)
         (Dict  
          (Name max_nesting)
           (Call hash_max_nest
            (args: 
             (Name hash)))))))
      (Assign 
       (Name out)
       (Call 
        (Attribute 
         (Name File)
         (Name open))
        (args: 
         (Name output)
         (String wb))))
      (Call 
       (Attribute 
        (Name out)
        (Name write))
       (args: 
        (Name json_string)))
      (Call 
       (Attribute 
        (Name out)
        (Name close))))
     (Nil)
     (Nil)
     (Block 
      (Assign 
       (Name end_file)
       (Call 
        (Attribute 
         (Name File)
         (Name open))
        (args: 
         (Name endmark)
         (String wb))))
      (Call 
       (Attribute 
        (Name end_file)
        (Name close))))))))
 (Assign 
  (Name $options)
  (Dict  ))
 (Call 
  (Attribute 
   (Call 
    (Attribute 
     (Name OptionParser)
     (Name new)))
   (Name parse!)))
 (If 
  (BinOp:Gt 
   (Call 
    (Attribute 
     (Name ARGV)
     (Name length)))
   (Int 0))
  (Block 
   (Call parse_dump
    (args: 
     (Subscript 
      (Name ARGV)
      (Int 0))
     (Subscript 
      (Name ARGV)
      (Int 1))
     (Subscript 
      (Name ARGV)
      (Int 2)))))
  (Nil)))

----------------------------------------

bind: AstSimplifier ty: Class_ty: AstSimplifier
  bind: make_string ty: Func_ty: [unkown_type] => unkown_type
  bind: negate ty: Func_ty: [] => unkown_type
  bind: args_to_array ty: Func_ty: [] => unkown_type
  bind: ident_end ty: Func_ty: [] => Int_ty
  bind: detect_encoding ty: Func_ty: [] => unkown_type
  bind: find_line_starts ty: Func_ty: [] => unkown_type
  bind: simplify ty: Func_ty: [] => unkown_type
  bind: node_start ty: Func_ty: [] => unkown_type
  bind: find_docs ty: Func_ty: [] => unkown_type
  bind: op ty: Func_ty: [] => unkown_type
  bind: initialize ty: Func_ty: [] => unkown_type
bind: $options ty: unkown_type
bind: parse_dump ty: Func_ty: [] => unkown_type
bind: lambda%4 ty: Func_ty: [] => unkown_type
bind: banner ty: Func_ty: [] => unkown_type
