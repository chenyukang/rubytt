(Block 
 (Call require
  (args: 
   (String ripper)))
 (Call require
  (args: 
   (String pp)))
 (Call require
  (args: 
   (String json)))
 (Call require
  (args: 
   (String optparse)))
 (Func banner
  (args: 
   (Name s Local))
  (body: 
   (Block 
    (Call puts
     (args: 
      (BinOp:Add 
       (BinOp:Add 
        (String \033[93m)
        (StrEmb
          (Block 
           (Name s Local))))
       (String :\033[0m)))))))
 (Class static: false
  (Name AstSimplifier Local)
  (Nil)
   (Block 
    (Func initialize
     (args: 
      (Name filename Local))
     (body: 
      (Block 
       (Assign 
        (Name filename Instance)
        (Name filename Local))
       (Assign 
        (Name f Local)
        (Call 
         (Attribute 
          (Name File Local)
          (Name open Local))
         (args: 
          (Name filename Local)
          (String rb))))
       (Assign 
        (Name src Instance)
        (Call 
         (Attribute 
          (Name f Local)
          (Name read Local))))
       (Call 
        (Attribute 
         (Name f Local)
         (Name close Local)))
       (Assign 
        (Name detected_enc Local)
        (Call detect_encoding
         (args: 
          (Name src Instance))))
       (If 
        (Name detected_enc Local)
        (Block 
         (Try 
          (Block 
           (Call 
            (Attribute 
             (Name src Instance)
             (Name force_encoding Local))
            (args: 
             (Name detected_enc Local))))
          (Handler 
            (Nil)
            (Block 
             (Call 
              (Attribute 
               (Name src Instance)
               (Name force_encoding Local))
              (args: 
               (String utf-8))))
            (Nil)
          (Nil)
          (Nil)))
        (Block 
         (Call 
          (Attribute 
           (Name src Instance)
           (Name force_encoding Local))
          (args: 
           (String utf-8)))))
       (Call 
        (Attribute 
         (Name src Instance)
         (Name encode Local))
        (args: 
         (String utf-8)
         (Dict  
          (Symbol undef)
           (Symbol replace)
          (Symbol invalid)
           (Symbol replace)
          (Symbol universal_newline)
           (Name true Local))))
       (Assign 
        (Name line_starts Instance)
        (Array 
         (Int 0)))
       (Call find_line_starts)
       (Call find_docs))))
    (Func detect_encoding
     (args: 
      (Name s Local))
     (body: 
      (Block 
       (Assign 
        (Name header Local)
        (Call 
         (Attribute 
          (Name s Local)
          (Name match Local))
         (args: 
          (String ^.*\n?.*\n?))))
       (If 
        (BinOp:And 
         (Name header Local)
         (Subscript 
          (Name header Local)
          (Int 0)))
        (Block 
         (Assign 
          (Name matched Local)
          (Call 
           (Attribute 
            (Subscript 
             (Name header Local)
             (Int 0))
            (Name match Local))
           (args: 
            (String ^\s*#.*coding\s*[:=]\s*([\w\d\-]+)))))
         (If 
          (BinOp:And 
           (Name matched Local)
           (Subscript 
            (Name matched Local)
            (Int 1)))
          (Block 
           (Subscript 
            (Name matched Local)
            (Int 1)))
          (Nil)))
        (Nil)))))
    (Func find_line_starts
     (body: 
      (Block 
       (Assign 
        (Name lines Local)
        (Call 
         (Attribute 
          (Name src Instance)
          (Name split Local))
         (args: 
          other)))
       (Assign 
        (Name total Local)
        (Int 0))
       (Call 
        (Attribute 
         (Name lines Local)
         (Name each Local))
        (block_arg: 
         (Func lambda%1
          (args: 
           (Name line Local))
          (body: 
           (Block 
            (Assign 
             (Name total Local)
             (BinOp:Add 
              (Name total Local)
              (BinOp:Add 
               (Call 
                (Attribute 
                 (Name line Local)
                 (Name length Local)))
               (Int 1))))
            (Call 
             (Attribute 
              (Name line_starts Instance)
              (Name push Local))
             (args: 
              (Name total Local)))))))))))
    (Func find_docs
     (body: 
      (Block 
       (Assign 
        (Name docs Instance)
        (Dict  ))
       (Assign 
        (Name lines Local)
        (Call 
         (Attribute 
          (Name src Instance)
          (Name split Local))
         (args: 
          other)))
       (Assign 
        (Name first_line Local)
        (Name nil Local))
       (Assign 
        (Name current_line Local)
        (Int 0))
       (Assign 
        (Name accum Local)
        (Array ))
       (Call 
        (Attribute 
         (Name lines Local)
         (Name each Local))
        (block_arg: 
         (Func lambda%2
          (args: 
           (Name line Local))
          (body: 
           (Block 
            (Assign 
             (Name matched Local)
             (Call 
              (Attribute 
               (Name line Local)
               (Name match Local))
              (args: 
               (String ^\s*#\s*(.*)))))
            (If 
             (Name matched Local)
             (Block 
              (Call 
               (Attribute 
                (Name accum Local)
                (Name push Local))
               (args: 
                (Subscript 
                 (Name matched Local)
                 (Int 1))))
              (If 
               (UnaryOp:Not 
                (Name first_line Local))
               (Block 
                (Assign 
                 (Name first_line Local)
                 (Name current_line Local)))
               (Nil)))
             (If 
              (UnaryOp:Not 
               (Call 
                (Attribute 
                 (Name accum Local)
                 (Name empty? Local))))
              (Block 
               (Assign 
                (Name doc Local)
                (Dict  
                 (Symbol type)
                  (Symbol string)
                 (Symbol id)
                  (Call 
                   (Attribute 
                    (Name accum Local)
                    (Name join Local))
                   (args: 
                    (String \n)))))
               (Assign 
                (Subscript 
                 (Name docs Instance)
                 (BinOp:Add 
                  (Name current_line Local)
                  (Int 1)))
                (Name doc Local))
               (Assign 
                (Subscript 
                 (Name docs Instance)
                 (BinOp:Sub 
                  (Name first_line Local)
                  (Int 1)))
                (Name doc Local))
               (Call 
                (Attribute 
                 (Name accum Local)
                 (Name clear Local)))
               (Assign 
                (Name first_line Local)
                (Name nil Local)))
              (Nil)))
            (Assign 
             (Name current_line Local)
             (BinOp:Add 
              (Name current_line Local)
              (Int 1)))))))))))
    (Func node_start
     (args: 
      (Name loc Local))
     (body: 
      (Block 
       (Assign 
        (Name line Local)
        (Subscript 
         (Name loc Local)
         (Int 0)))
       (Assign 
        (Name col Local)
        (Subscript 
         (Name loc Local)
         (Int 1)))
       (BinOp:Add 
        (Subscript 
         (Name line_starts Instance)
         (BinOp:Sub 
          (Name line Local)
          (Int 1)))
        (Name col Local)))))
    (Func ident_end
     (args: 
      (Name start_idx Local))
     (body: 
      (Block 
       (If 
        (BinOp:And 
         (BinOp:Equal 
          (Subscript 
           (Name src Instance)
           (Name start_idx Local))
          (String [))
         (BinOp:Equal 
          (Subscript 
           (Name src Instance)
           (BinOp:Add 
            (Name start_idx Local)
            (Int 1)))
          (String ])))
        (Block 
         (Return 
          (Array 
           (BinOp:Add 
            (Name start_idx Local)
            (Int 2)))))
        (Nil))
       (Assign 
        (Name idx Local)
        (Name start_idx Local))
       (While 
        (BinOp:And 
         (Block 
          (BinOp:Lt 
           (Name idx Local)
           (Call 
            (Attribute 
             (Name src Instance)
             (Name length Local)))))
         (Call 
          (Attribute 
           (Subscript 
            (Name src Instance)
            (Name idx Local))
           (Name match Local))
          (args: 
           other)))
        (Block 
         (Assign 
          (Name idx Local)
          (BinOp:Add 
           (Name idx Local)
           (Int 1)))))
       (Name idx Local))))
    (Func simplify
     (body: 
      (Block 
       (Assign 
        (Name tree Local)
        (Call 
         (Attribute 
          (Call 
           (Attribute 
            (Attribute 
             (Name Ripper Local)
             (Name SexpBuilder Local))
            (Name new Local))
           (args: 
            (Name src Instance)))
          (Name parse Local))))
       (If 
        (Subscript 
         (Name $options Global)
         (Symbol debug))
        (Block 
         (Call banner
          (args: 
           (String sexp)))
         (Call pp
          (args: 
           (Name tree Local))))
        (Nil))
       (Assign 
        (Name simplified Local)
        (Call convert
         (args: 
          (Name tree Local))))
       (Assign 
        (Name simplified Local)
        (Call find_locations
         (args: 
          (Name simplified Local))))
       (If 
        (Subscript 
         (Name $options Global)
         (Symbol debug))
        (Block 
         (Call banner
          (args: 
           (String simplified)))
         (Call pp
          (args: 
           (Name simplified Local))))
        (Nil))
       (Name simplified Local))))
    (Func find_locations
     (args: 
      (Name obj Local))
     (body: 
      (Block 
       (Func find1
        (args: 
         (Name obj Local))
        (body: 
         (Block 
          (If 
           (Call 
            (Attribute 
             (Name obj Local)
             (Name is_a? Local))
            (args: 
             (Name Hash Local)))
           (Block 
            (Assign 
             (Name ret Local)
             (Dict  ))
            (Assign 
             (Name whole_start Local)
             (Name nil Local))
            (Assign 
             (Name whole_end Local)
             (Name nil Local))
            (Assign 
             (Name start_line Local)
             (Name nil Local))
            (Assign 
             (Name end_line Local)
             (Name nil Local))
            (Call 
             (Attribute 
              (Name obj Local)
              (Name each Local))
             (block_arg: 
              (Func lambda%3
               (args: 
                (Name k Local)
                (Name v Local))
               (body: 
                (Block 
                 (If 
                  (BinOp:Equal 
                   (Name k Local)
                   (Symbol location))
                  (Block 
                   (Assign 
                    (Name start_idx Local)
                    (Call node_start
                     (args: 
                      (Name v Local))))
                   (Assign 
                    (Name end_idx Local)
                    (Call ident_end
                     (args: 
                      (Name start_idx Local))))
                   (Assign 
                    (Subscript 
                     (Name ret Local)
                     (Symbol start))
                    (Name start_idx Local))
                   (Assign 
                    (Subscript 
                     (Name ret Local)
                     (Symbol end))
                    (Name end_idx Local))
                   (Assign 
                    (Subscript 
                     (Name ret Local)
                     (Symbol start_line))
                    (Subscript 
                     (Name v Local)
                     (Int 0)))
                   (Assign 
                    (Subscript 
                     (Name ret Local)
                     (Symbol end_line))
                    (Subscript 
                     (Name v Local)
                     (Int 1)))
                   (Assign 
                    (Name whole_start Local)
                    (Name start_idx Local))
                   (Assign 
                    (Name whole_end Local)
                    (Name end_idx Local))
                   (Assign 
                    (Name start_line Local)
                    (Subscript 
                     (Name v Local)
                     (Int 0)))
                   (Assign 
                    (Name end_line Local)
                    (Subscript 
                     (Name v Local)
                     (Int 1))))
                  (Block 
                   (Assign 
                    (Array 
                     (Name new_node Local)
                     (Name start_idx Local)
                     (Name end_idx Local)
                     (Name line_start Local)
                     (Name line_end Local))
                    (Call find1
                     (args: 
                      (Name v Local))))
                   (Assign 
                    (Subscript 
                     (Name ret Local)
                     (Name k Local))
                    (Name new_node Local))
                   (If 
                    (BinOp:And 
                     (Name start_idx Local)
                     (Block 
                      (BinOp:Or 
                       (UnaryOp:Not 
                        (Name whole_start Local))
                       (BinOp:Gt 
                        (Name whole_start Local)
                        (Name start_idx Local)))))
                    (Block 
                     (Assign 
                      (Name whole_start Local)
                      (Name start_idx Local))
                     (Assign 
                      (Name start_line Local)
                      (Name line_start Local)))
                    (Nil))
                   (If 
                    (BinOp:And 
                     (Name end_idx Local)
                     (Block 
                      (BinOp:Or 
                       (UnaryOp:Not 
                        (Name whole_end Local))
                       (BinOp:Lt 
                        (Name whole_end Local)
                        (Name end_idx Local)))))
                    (Block 
                     (Assign 
                      (Name whole_end Local)
                      (Name end_idx Local))
                     (Assign 
                      (Name end_line Local)
                      (Name line_end Local)))
                    (Nil)))))))))
            (If 
             (Name whole_start Local)
             (Block 
              (If 
               (BinOp:And 
                (Call 
                 (Attribute 
                  (Array 
                   (Symbol module)
                   (Symbol class)
                   (Symbol def)
                   (Symbol lambda)
                   (Symbol if)
                   (Symbol begin)
                   (Symbol while)
                   (Symbol for))
                  (Name               .include? Local))
                 (args: 
                  (Subscript 
                   (Name obj Local)
                   (Symbol type))))
                (UnaryOp:Not 
                 (Subscript 
                  (Name obj Local)
                  (Symbol mod))))
               (Block 
                (Assign 
                 (Name locator Local)
                 (Name whole_end Local))
                (While 
                 (BinOp:And 
                  (BinOp:Or 
                   (BinOp:Lt 
                    (Name locator Local)
                    (Call 
                     (Attribute 
                      (Name src Instance)
                      (Name length Local))))
                   (BinOp:Eq 
                    (Name locator Local)
                    (Call 
                     (Attribute 
                      (Name src Instance)
                      (Name length Local)))))
                  (UnaryOp:Not 
                   (Call 
                    (Attribute 
                     (String end)
                     (Name eql? Local))
                    (args: 
                     (Subscript 
                      (Name src Instance)
                      (Array 
                       (Name locator Local)
                       (BinOp:Sub 
                        (BinOp:Add 
                         (Name locator Local)
                         (Call 
                          (Attribute 
                           (String end)
                           (Name length Local))))
                        (Int 1))))))))
                 (Block 
                  (Assign 
                   (Name locator Local)
                   (BinOp:Add 
                    (Name locator Local)
                    (Int 1)))))
                (If 
                 (Call 
                  (Attribute 
                   (String end)
                   (Name eql? Local))
                  (args: 
                   (Subscript 
                    (Name src Instance)
                    (Array 
                     (Name locator Local)
                     (BinOp:Sub 
                      (BinOp:Add 
                       (Name locator Local)
                       (Call 
                        (Attribute 
                         (String end)
                         (Name length Local))))
                      (Int 1))))))
                 (Block 
                  (Assign 
                   (Name whole_end Local)
                   (BinOp:Add 
                    (Name locator Local)
                    (Call 
                     (Attribute 
                      (String end)
                      (Name length Local))))))
                 (Nil)))
               (Nil))
              (Assign 
               (Subscript 
                (Name ret Local)
                (Symbol start))
               (Name whole_start Local))
              (Assign 
               (Subscript 
                (Name ret Local)
                (Symbol end))
               (Name whole_end Local))
              (Assign 
               (Subscript 
                (Name ret Local)
                (Symbol start_line))
               (Name start_line Local))
              (Assign 
               (Subscript 
                (Name ret Local)
                (Symbol end_line))
               (Name end_line Local))
              (If 
               (Call 
                (Attribute 
                 (Array 
                  (Symbol module)
                  (Symbol class)
                  (Symbol def))
                 (Name include? Local))
                (args: 
                 (Subscript 
                  (Name ret Local)
                  (Symbol type))))
               (Block 
                (Assign 
                 (Name doc Local)
                 (Subscript 
                  (Name docs Instance)
                  (Name start_line Local)))
                (If 
                 (Name doc Local)
                 (Block 
                  (Assign 
                   (Subscript 
                    (Name ret Local)
                    (Symbol doc))
                   (Name doc Local)))
                 (Nil)))
               (Nil)))
             (Nil))
            (Return 
             (Array 
              (Name ret Local)
              (Name whole_start Local)
              (Name whole_end Local)
              (Name start_line Local)
              (Name end_line Local))))
           (If 
            (Call 
             (Attribute 
              (Name obj Local)
              (Name is_a? Local))
             (args: 
              (Name Array Local)))
            (Block 
             (Assign 
              (Name ret Local)
              (Array ))
             (Assign 
              (Name whole_start Local)
              (Name nil Local))
             (Assign 
              (Name whole_end Local)
              (Name nil Local))
             (For 
              (Name v Local)
              (Name obj Local)
              (Block 
               (Assign 
                (Array 
                 (Name new_node Local)
                 (Name start_idx Local)
                 (Name end_idx Local)
                 (Name line_start Local)
                 (Name line_end Local))
                (Call find1
                 (args: 
                  (Name v Local))))
               (Call 
                (Attribute 
                 (Name ret Local)
                 (Name push Local))
                (args: 
                 (Name new_node Local)))
               (If 
                (BinOp:And 
                 (Name start_idx Local)
                 (Block 
                  (BinOp:Or 
                   (UnaryOp:Not 
                    (Name whole_start Local))
                   (BinOp:Gt 
                    (Name whole_start Local)
                    (Name start_idx Local)))))
                (Block 
                 (Assign 
                  (Name whole_start Local)
                  (Name start_idx Local))
                 (Assign 
                  (Name start_line Local)
                  (Name line_start Local)))
                (Nil))
               (If 
                (BinOp:And 
                 (Name end_idx Local)
                 (Block 
                  (BinOp:Or 
                   (UnaryOp:Not 
                    (Name whole_end Local))
                   (BinOp:Lt 
                    (Name whole_end Local)
                    (Name end_idx Local)))))
                (Block 
                 (Assign 
                  (Name whole_end Local)
                  (Name end_idx Local))
                 (Assign 
                  (Name end_line Local)
                  (Name line_end Local)))
                (Nil))))
             (Return 
              (Array 
               (Name ret Local)
               (Name whole_start Local)
               (Name whole_end Local)
               (Name start_line Local)
               (Name end_line Local))))
            (Block 
             (Return 
              (Array 
               (Name obj Local)
               (Name nil Local)
               (Name nil Local)
               (Name nil Local)
               (Name nil Local)))))))))
       (Assign 
        (Array 
         (Name node Local)
         (Name _ Local)
         (Name _ Local)
         (Name _ Local)
         (Name _ Local))
        (Call find1
         (args: 
          (Name obj Local))))
       (Name node Local))))
    (Func convert
     (args: 
      (Name exp Local))
     (body: 
      (Block 
       (If 
        (BinOp:Equal 
         (Name exp Local)
         (Name nil Local))
        (Block 
         (Dict  ))
        (If 
         (BinOp:Equal 
          (Name exp Local)
          (Name false Local))
         (Block 
          (Dict  
           (Symbol type)
            (Symbol name)
           (Symbol id)
            (String false)))
         (If 
          (BinOp:Equal 
           (Name exp Local)
           (Name true Local))
          (Block 
           (Dict  
            (Symbol type)
             (Symbol name)
            (Symbol id)
             (String true)))
          (Block 
           (If 
            (BinOp:In 
             (Subscript 
              (Name exp Local)
              (Int 0))
             (Array 
              (Symbol program)))
            (Block 
             (Dict  
              (Symbol type)
               (Symbol program)
              (Symbol body)
               (Call convert
                (args: 
                 (Subscript 
                  (Name exp Local)
                  (Int 1))))
              (Symbol filename)
               (Name filename Instance)))
            (If 
             (BinOp:In 
              (Subscript 
               (Name exp Local)
               (Int 0))
              (Array 
               (Symbol module)))
             (Block 
              (Dict  
               (Symbol type)
                (Symbol module)
               (Symbol name)
                (Call convert
                 (args: 
                  (Subscript 
                   (Name exp Local)
                   (Int 1))))
               (Symbol body)
                (Call convert
                 (args: 
                  (Subscript 
                   (Name exp Local)
                   (Int 2))))
               (Symbol filename)
                (Name filename Instance)))
             (If 
              (BinOp:In 
               (Subscript 
                (Name exp Local)
                (Int 0))
               (Array 
                (Symbol ident)
                (Symbol op)))
              (Block 
               (Dict  
                (Symbol type)
                 (Symbol name)
                (Symbol id)
                 (Subscript 
                  (Name exp Local)
                  (Int 1))
                (Symbol location)
                 (Subscript 
                  (Name exp Local)
                  (Int 2))))
              (If 
               (BinOp:In 
                (Subscript 
                 (Name exp Local)
                 (Int 0))
                (Array 
                 (Symbol gvar)))
               (Block 
                (Dict  
                 (Symbol type)
                  (Symbol gvar)
                 (Symbol id)
                  (Subscript 
                   (Name exp Local)
                   (Int 1))
                 (Symbol location)
                  (Subscript 
                   (Name exp Local)
                   (Int 2))))
               (If 
                (BinOp:In 
                 (Subscript 
                  (Name exp Local)
                  (Int 0))
                 (Array 
                  (Symbol dyna_symbol)))
                (Block 
                 (Dict  
                  (Symbol type)
                   (Symbol name)
                  (Symbol id)
                   (String #dyna_symbol)))
                (If 
                 (BinOp:In 
                  (Subscript 
                   (Name exp Local)
                   (Int 0))
                  (Array 
                   (Symbol symbol)))
                 (Block 
                  (Assign 
                   (Name sym Local)
                   (Call convert
                    (args: 
                     (Subscript 
                      (Name exp Local)
                      (Int 1)))))
                  (Assign 
                   (Subscript 
                    (Name sym Local)
                    (Symbol type))
                   (Symbol symbol))
                  (Name sym Local))
                 (If 
                  (BinOp:In 
                   (Subscript 
                    (Name exp Local)
                    (Int 0))
                   (Array 
                    (Symbol cvar)))
                  (Block 
                   (Dict  
                    (Symbol type)
                     (Symbol cvar)
                    (Symbol id)
                     (Subscript 
                      (Subscript 
                       (Name exp Local)
                       (Int 1))
                      (Array 
                       (Int 2)
                       (UnaryOp:Sub 
                        (Int 1))))
                    (Symbol location)
                     (Subscript 
                      (Name exp Local)
                      (Int 2))))
                  (If 
                   (BinOp:In 
                    (Subscript 
                     (Name exp Local)
                     (Int 0))
                    (Array 
                     (Symbol ivar)))
                   (Block 
                    (Dict  
                     (Symbol type)
                      (Symbol ivar)
                     (Symbol id)
                      (Subscript 
                       (Subscript 
                        (Name exp Local)
                        (Int 1))
                       (Array 
                        (Int 1)
                        (UnaryOp:Sub 
                         (Int 1))))
                     (Symbol location)
                      (Subscript 
                       (Name exp Local)
                       (Int 2))))
                   (If 
                    (BinOp:In 
                     (Subscript 
                      (Name exp Local)
                      (Int 0))
                     (Array 
                      (Symbol const)
                      (Symbol kw)
                      (Symbol backtick)))
                    (Block 
                     (Dict  
                      (Symbol type)
                       (Symbol name)
                      (Symbol id)
                       (Subscript 
                        (Name exp Local)
                        (Int 1))
                      (Symbol location)
                       (Subscript 
                        (Name exp Local)
                        (Int 2))))
                    (If 
                     (BinOp:In 
                      (Subscript 
                       (Name exp Local)
                       (Int 0))
                      (Array 
                       (Symbol label)))
                     (Block 
                      (Dict  
                       (Symbol type)
                        (Symbol name)
                       (Symbol id)
                        (Subscript 
                         (Subscript 
                          (Name exp Local)
                          (Int 1))
                         (Array 
                          (Int 0)
                          (UnaryOp:Sub 
                           (Int 2))))
                       (Symbol location)
                        (Subscript 
                         (Name exp Local)
                         (Int 2))))
                     (If 
                      (BinOp:In 
                       (Subscript 
                        (Name exp Local)
                        (Int 0))
                       (Array 
                        (Symbol def)))
                      (Block 
                       (Dict  
                        (Symbol type)
                         (Symbol def)
                        (Symbol name)
                         (Call convert
                          (args: 
                           (Subscript 
                            (Name exp Local)
                            (Int 1))))
                        (Symbol params)
                         (Call convert
                          (args: 
                           (Subscript 
                            (Name exp Local)
                            (Int 2))))
                        (Symbol body)
                         (Call convert
                          (args: 
                           (Subscript 
                            (Name exp Local)
                            (Int 3))))))
                      (If 
                       (BinOp:In 
                        (Subscript 
                         (Name exp Local)
                         (Int 0))
                        (Array 
                         (Symbol defs)))
                       (Block 
                        (Assign 
                         (Name name Local)
                         (Dict  
                          (Symbol type)
                           (Symbol attribute)
                          (Symbol value)
                           (Call convert
                            (args: 
                             (Subscript 
                              (Name exp Local)
                              (Int 1))))
                          (Symbol attr)
                           (Call convert
                            (args: 
                             (Subscript 
                              (Name exp Local)
                              (Int 3))))))
                        (Dict  
                         (Symbol type)
                          (Symbol def)
                         (Symbol name)
                          (Name name Local)
                         (Symbol params)
                          (Call convert
                           (args: 
                            (Subscript 
                             (Name exp Local)
                             (Int 4))))
                         (Symbol body)
                          (Call convert
                           (args: 
                            (Subscript 
                             (Name exp Local)
                             (Int 5))))))
                       (If 
                        (BinOp:In 
                         (Subscript 
                          (Name exp Local)
                          (Int 0))
                         (Array 
                          (Symbol do_block)))
                        (Block 
                         (Dict  
                          (Symbol type)
                           (Symbol lambda)
                          (Symbol params)
                           (Call convert
                            (args: 
                             (Subscript 
                              (Name exp Local)
                              (Int 1))))
                          (Symbol body)
                           (Call convert
                            (args: 
                             (Subscript 
                              (Name exp Local)
                              (Int 2))))))
                        (If 
                         (BinOp:In 
                          (Subscript 
                           (Name exp Local)
                           (Int 0))
                          (Array 
                           (Symbol lambda)))
                         (Block 
                          (Dict  
                           (Symbol type)
                            (Symbol lambda)
                           (Symbol params)
                            (Call convert
                             (args: 
                              (Subscript 
                               (Name exp Local)
                               (Int 1))))
                           (Symbol body)
                            (Call convert
                             (args: 
                              (Subscript 
                               (Name exp Local)
                               (Int 2))))))
                         (If 
                          (BinOp:In 
                           (Subscript 
                            (Name exp Local)
                            (Int 0))
                           (Array 
                            (Symbol brace_block)))
                          (Block 
                           (Dict  
                            (Symbol type)
                             (Symbol lambda)
                            (Symbol params)
                             (Call convert
                              (args: 
                               (Subscript 
                                (Name exp Local)
                                (Int 1))))
                            (Symbol body)
                             (Call convert
                              (args: 
                               (Subscript 
                                (Name exp Local)
                                (Int 2))))))
                          (If 
                           (BinOp:In 
                            (Subscript 
                             (Name exp Local)
                             (Int 0))
                            (Array 
                             (Symbol params)))
                           (Block 
                            (Assign 
                             (Name ret Local)
                             (Dict  
                              (Symbol type)
                               (Symbol params)))
                            (If 
                             (Subscript 
                              (Name exp Local)
                              (Int 1))
                             (Block 
                              (Assign 
                               (Subscript 
                                (Name ret Local)
                                (Symbol positional))
                               (Call convert_array
                                (args: 
                                 (Subscript 
                                  (Name exp Local)
                                  (Int 1))))))
                             (Nil))
                            (If 
                             (Subscript 
                              (Name exp Local)
                              (Int 2))
                             (Block 
                              (If 
                               (UnaryOp:Not 
                                (Subscript 
                                 (Name ret Local)
                                 (Symbol positional)))
                               (Block 
                                (Assign 
                                 (Subscript 
                                  (Name ret Local)
                                  (Symbol positional))
                                 (Array )))
                               (Nil))
                              (Call 
                               (Attribute 
                                (Subscript 
                                 (Name exp Local)
                                 (Int 2))
                                (Name each Local))
                               (block_arg: 
                                (Func lambda%4
                                 (args: 
                                  (Name x Local))
                                 (body: 
                                  (Block 
                                   (Call 
                                    (Attribute 
                                     (Subscript 
                                      (Name ret Local)
                                      (Symbol positional))
                                     (Name push Local))
                                    (args: 
                                     (Call convert
                                      (args: 
                                       (Subscript 
                                        (Name x Local)
                                        (Int 0)))))))))))
                              (Assign 
                               (Subscript 
                                (Name ret Local)
                                (Symbol defaults))
                               (Call 
                                (Attribute 
                                 (Subscript 
                                  (Name exp Local)
                                  (Int 2))
                                 (Name map Local))
                                (block_arg: 
                                 (Func lambda%5
                                  (args: 
                                   (Name x Local))
                                  (body: 
                                   (Block 
                                    (Call convert
                                     (args: 
                                      (Subscript 
                                       (Name x Local)
                                       (Int 1)))))))))))
                             (Nil))
                            (If 
                             (BinOp:And 
                              (Subscript 
                               (Name exp Local)
                               (Int 3))
                              (UnaryOp:Not 
                               (BinOp:Equal 
                                (Subscript 
                                 (Name exp Local)
                                 (Int 3))
                                (Int 0))))
                             (Block 
                              (Assign 
                               (Subscript 
                                (Name ret Local)
                                (Symbol rest))
                               (Call convert
                                (args: 
                                 (Subscript 
                                  (Name exp Local)
                                  (Int 3))))))
                             (Nil))
                            (If 
                             (Subscript 
                              (Name exp Local)
                              (Int 4))
                             (Block 
                              (Assign 
                               (Subscript 
                                (Name ret Local)
                                (Symbol after_rest))
                               (Call convert_array
                                (args: 
                                 (Subscript 
                                  (Name exp Local)
                                  (Int 4))))))
                             (Nil))
                            (If 
                             (Subscript 
                              (Name exp Local)
                              (Int 5))
                             (Block 
                              (Assign 
                               (Subscript 
                                (Name ret Local)
                                (Symbol kw_keys))
                               (Call convert_array
                                (args: 
                                 (Call 
                                  (Attribute 
                                   (Subscript 
                                    (Name exp Local)
                                    (Int 5))
                                   (Name map Local))
                                  (block_arg: 
                                   (Func lambda%6
                                    (args: 
                                     (Name x Local))
                                    (body: 
                                     (Block 
                                      (Subscript 
                                       (Name x Local)
                                       (Int 0))))))))))
                              (Assign 
                               (Subscript 
                                (Name ret Local)
                                (Symbol kw_values))
                               (Call convert_array
                                (args: 
                                 (Call 
                                  (Attribute 
                                   (Subscript 
                                    (Name exp Local)
                                    (Int 5))
                                   (Name map Local))
                                  (block_arg: 
                                   (Func lambda%7
                                    (args: 
                                     (Name x Local))
                                    (body: 
                                     (Block 
                                      (Subscript 
                                       (Name x Local)
                                       (Int 1)))))))))))
                             (Nil))
                            (If 
                             (Subscript 
                              (Name exp Local)
                              (Int 6))
                             (Block 
                              (Assign 
                               (Subscript 
                                (Name ret Local)
                                (Symbol rest_kw))
                               (Call convert
                                (args: 
                                 (Subscript 
                                  (Name exp Local)
                                  (Int 6))))))
                             (Nil))
                            (If 
                             (Subscript 
                              (Name exp Local)
                              (Int 7))
                             (Block 
                              (Assign 
                               (Subscript 
                                (Name ret Local)
                                (Symbol blockarg))
                               (Call convert
                                (args: 
                                 (Subscript 
                                  (Name exp Local)
                                  (Int 7))))))
                             (Nil))
                            (Name ret Local))
                           (If 
                            (BinOp:In 
                             (Subscript 
                              (Name exp Local)
                              (Int 0))
                             (Array 
                              (Symbol block_var)))
                            (Block 
                             (Assign 
                              (Name params Local)
                              (Call convert
                               (args: 
                                (Subscript 
                                 (Name exp Local)
                                 (Int 1)))))
                             (If 
                              (Subscript 
                               (Name exp Local)
                               (Int 2))
                              (Block 
                               (Assign 
                                (Subscript 
                                 (Name params Local)
                                 (Symbol block_var))
                                (Call convert_array
                                 (args: 
                                  (Subscript 
                                   (Name exp Local)
                                   (Int 2))))))
                              (Nil))
                             (Name params Local))
                            (If 
                             (BinOp:In 
                              (Subscript 
                               (Name exp Local)
                               (Int 0))
                              (Array 
                               (Symbol class)))
                             (Block 
                              (Assign 
                               (Name ret Local)
                               (Dict  
                                (Symbol type)
                                 (Symbol class)
                                (Symbol static)
                                 (Name false Local)
                                (Symbol name)
                                 (Call convert
                                  (args: 
                                   (Subscript 
                                    (Name exp Local)
                                    (Int 1))))
                                (Symbol body)
                                 (Call convert
                                  (args: 
                                   (Subscript 
                                    (Name exp Local)
                                    (Int 3))))))
                              (If 
                               (Subscript 
                                (Name exp Local)
                                (Int 2))
                               (Block 
                                (Assign 
                                 (Subscript 
                                  (Name ret Local)
                                  (Symbol super))
                                 (Call convert
                                  (args: 
                                   (Subscript 
                                    (Name exp Local)
                                    (Int 2))))))
                               (Nil))
                              (Name ret Local))
                             (If 
                              (BinOp:In 
                               (Subscript 
                                (Name exp Local)
                                (Int 0))
                               (Array 
                                (Symbol sclass)))
                              (Block 
                               (Dict  
                                (Symbol type)
                                 (Symbol class)
                                (Symbol static)
                                 (Name true Local)
                                (Symbol name)
                                 (Call convert
                                  (args: 
                                   (Subscript 
                                    (Name exp Local)
                                    (Int 1))))
                                (Symbol body)
                                 (Call convert
                                  (args: 
                                   (Subscript 
                                    (Name exp Local)
                                    (Int 2))))))
                              (If 
                               (BinOp:In 
                                (Subscript 
                                 (Name exp Local)
                                 (Int 0))
                                (Array 
                                 (Symbol method_add_block)))
                               (Block 
                                (Assign 
                                 (Name call Local)
                                 (Call convert
                                  (args: 
                                   (Subscript 
                                    (Name exp Local)
                                    (Int 1)))))
                                (If 
                                 (Subscript 
                                  (Name call Local)
                                  (Symbol args))
                                 (Block 
                                  (Assign 
                                   (Subscript 
                                    (Subscript 
                                     (Name call Local)
                                     (Symbol args))
                                    (Symbol blockarg))
                                   (Call convert
                                    (args: 
                                     (Subscript 
                                      (Name exp Local)
                                      (Int 2))))))
                                 (Block 
                                  (Assign 
                                   (Subscript 
                                    (Name call Local)
                                    (Symbol args))
                                   (Dict  
                                    (Symbol blockarg)
                                     (Call convert
                                      (args: 
                                       (Subscript 
                                        (Name exp Local)
                                        (Int 2))))))))
                                (Name call Local))
                               (If 
                                (BinOp:In 
                                 (Subscript 
                                  (Name exp Local)
                                  (Int 0))
                                 (Array 
                                  (Symbol method_add_arg)))
                                (Block 
                                 (Assign 
                                  (Name call Local)
                                  (Call convert
                                   (args: 
                                    (Subscript 
                                     (Name exp Local)
                                     (Int 1)))))
                                 (Assign 
                                  (Subscript 
                                   (Name call Local)
                                   (Symbol args))
                                  (Call convert
                                   (args: 
                                    (Subscript 
                                     (Name exp Local)
                                     (Int 2)))))
                                 (Name call Local))
                                (If 
                                 (BinOp:In 
                                  (Subscript 
                                   (Name exp Local)
                                   (Int 0))
                                  (Array 
                                   (Symbol vcall)))
                                 (Block 
                                  (Dict  
                                   (Symbol type)
                                    (Symbol call)
                                   (Symbol func)
                                    (Call convert
                                     (args: 
                                      (Subscript 
                                       (Name exp Local)
                                       (Int 1))))))
                                 (If 
                                  (BinOp:In 
                                   (Subscript 
                                    (Name exp Local)
                                    (Int 0))
                                   (Array 
                                    (Symbol command)))
                                  (Block 
                                   (Dict  
                                    (Symbol type)
                                     (Symbol call)
                                    (Symbol func)
                                     (Call convert
                                      (args: 
                                       (Subscript 
                                        (Name exp Local)
                                        (Int 1))))
                                    (Symbol args)
                                     (Call convert
                                      (args: 
                                       (Subscript 
                                        (Name exp Local)
                                        (Int 2))))))
                                  (If 
                                   (BinOp:In 
                                    (Subscript 
                                     (Name exp Local)
                                     (Int 0))
                                    (Array 
                                     (Symbol command_call)))
                                   (Block 
                                    (If 
                                     (BinOp:Or 
                                      (BinOp:Equal 
                                       (Subscript 
                                        (Name exp Local)
                                        (Int 2))
                                       (Name #dyna_symbol Local))
                                      (BinOp:Equal 
                                       (Subscript 
                                        (Name exp Local)
                                        (Int 2))
                                       (Name #dyna_symbol Local)))
                                     (Block 
                                      (Assign 
                                       (Name func Local)
                                       (Dict  
                                        (Symbol type)
                                         (Symbol attribute)
                                        (Symbol value)
                                         (Call convert
                                          (args: 
                                           (Subscript 
                                            (Name exp Local)
                                            (Int 1))))
                                        (Symbol attr)
                                         (Call convert
                                          (args: 
                                           (Subscript 
                                            (Name exp Local)
                                            (Int 3)))))))
                                     (Block 
                                      (Assign 
                                       (Name func Local)
                                       (Call convert
                                        (args: 
                                         (Subscript 
                                          (Name exp Local)
                                          (Int 1)))))))
                                    (Dict  
                                     (Symbol type)
                                      (Symbol call)
                                     (Symbol func)
                                      (Name func Local)
                                     (Symbol args)
                                      (Call convert
                                       (args: 
                                        (Subscript 
                                         (Name exp Local)
                                         (Int 4))))))
                                   (If 
                                    (BinOp:In 
                                     (Subscript 
                                      (Name exp Local)
                                      (Int 0))
                                     (Array 
                                      (Symbol super)
                                      (Symbol zsuper)))
                                    (Block 
                                     (Dict  
                                      (Symbol type)
                                       (Symbol call)
                                      (Symbol func)
                                       (Dict  
                                        (Symbol type)
                                         (Symbol name)
                                        (Symbol id)
                                         (Symbol super))
                                      (Symbol args)
                                       (Call convert
                                        (args: 
                                         (Subscript 
                                          (Name exp Local)
                                          (Int 1))))))
                                    (If 
                                     (BinOp:In 
                                      (Subscript 
                                       (Name exp Local)
                                       (Int 0))
                                      (Array 
                                       (Symbol call)
                                       (Symbol fcall)))
                                     (Block 
                                      (If 
                                       (BinOp:And 
                                        (UnaryOp:Not 
                                         (BinOp:Equal 
                                          (Subscript 
                                           (Name exp Local)
                                           (Int 3))
                                          (Symbol call)))
                                        (Block 
                                         (BinOp:Or 
                                          (BinOp:Equal 
                                           (Subscript 
                                            (Name exp Local)
                                            (Int 2))
                                           (Name #dyna_symbol Local))
                                          (BinOp:Equal 
                                           (Subscript 
                                            (Name exp Local)
                                            (Int 2))
                                           (Name #dyna_symbol Local)))))
                                       (Block 
                                        (Assign 
                                         (Name func Local)
                                         (Dict  
                                          (Symbol type)
                                           (Symbol attribute)
                                          (Symbol value)
                                           (Call convert
                                            (args: 
                                             (Subscript 
                                              (Name exp Local)
                                              (Int 1))))
                                          (Symbol attr)
                                           (Call convert
                                            (args: 
                                             (Subscript 
                                              (Name exp Local)
                                              (Int 3)))))))
                                       (Block 
                                        (Assign 
                                         (Name func Local)
                                         (Call convert
                                          (args: 
                                           (Subscript 
                                            (Name exp Local)
                                            (Int 1)))))))
                                      (Dict  
                                       (Symbol type)
                                        (Symbol call)
                                       (Symbol func)
                                        (Name func Local)))
                                     (If 
                                      (BinOp:In 
                                       (Subscript 
                                        (Name exp Local)
                                        (Int 0))
                                       (Array 
                                        (Symbol args_new)
                                        (Symbol mlhs_new)
                                        (Symbol mrhs_new)
                                        (Symbol words_new)
                                        (Symbol word_new)
                                        (Symbol qwords_new)
                                        (Symbol qsymbols_new)
                                        (Symbol symbols_new)))
                                      (Block 
                                       (Dict  
                                        (Symbol type)
                                         (Symbol args)
                                        (Symbol positional)
                                         (Array )))
                                      (If 
                                       (BinOp:In 
                                        (Subscript 
                                         (Name exp Local)
                                         (Int 0))
                                        (Array 
                                         (Symbol args_add)
                                         (Symbol mlhs_add)
                                         (Symbol mrhs_add)
                                         (Symbol word_add)
                                         (Symbol words_add)
                                         (Symbol qwords_add)
                                         (Symbol qsymbols_add)
                                         (Symbol symbols_add)))
                                       (Block 
                                        (Assign 
                                         (Name args Local)
                                         (Call convert
                                          (args: 
                                           (Subscript 
                                            (Name exp Local)
                                            (Int 1)))))
                                        (Call 
                                         (Attribute 
                                          (Subscript 
                                           (Name args Local)
                                           (Symbol positional))
                                          (Name push Local))
                                         (args: 
                                          (Call convert
                                           (args: 
                                            (Subscript 
                                             (Name exp Local)
                                             (Int 2))))))
                                        (Name args Local))
                                       (If 
                                        (BinOp:In 
                                         (Subscript 
                                          (Name exp Local)
                                          (Int 0))
                                         (Array 
                                          (Symbol args_add_star)
                                          (Symbol mrhs_add_star)
                                          (Symbol mlhs_add_star)))
                                        (Block 
                                         (Assign 
                                          (Name args Local)
                                          (Call convert
                                           (args: 
                                            (Subscript 
                                             (Name exp Local)
                                             (Int 1)))))
                                         (If 
                                          (Subscript 
                                           (Name exp Local)
                                           (Int 2))
                                          (Block 
                                           (Assign 
                                            (Subscript 
                                             (Name args Local)
                                             (Symbol star))
                                            (Call convert
                                             (args: 
                                              (Subscript 
                                               (Name exp Local)
                                               (Int 2))))))
                                          (Nil))
                                         (Name args Local))
                                        (If 
                                         (BinOp:In 
                                          (Subscript 
                                           (Name exp Local)
                                           (Int 0))
                                          (Array 
                                           (Symbol args_add_block)))
                                         (Block 
                                          (Assign 
                                           (Name args Local)
                                           (Call convert
                                            (args: 
                                             (Subscript 
                                              (Name exp Local)
                                              (Int 1)))))
                                          (If 
                                           (Subscript 
                                            (Name exp Local)
                                            (Int 2))
                                           (Block 
                                            (Assign 
                                             (Subscript 
                                              (Name args Local)
                                              (Symbol blockarg))
                                             (Call convert
                                              (args: 
                                               (Subscript 
                                                (Name exp Local)
                                                (Int 2))))))
                                           (Nil))
                                          (Name args Local))
                                         (If 
                                          (BinOp:In 
                                           (Subscript 
                                            (Name exp Local)
                                            (Int 0))
                                           (Array 
                                            (Symbol assign)
                                            (Symbol massign)))
                                          (Block 
                                           (Dict  
                                            (Symbol type)
                                             (Symbol assign)
                                            (Symbol target)
                                             (Call convert
                                              (args: 
                                               (Subscript 
                                                (Name exp Local)
                                                (Int 1))))
                                            (Symbol value)
                                             (Call convert
                                              (args: 
                                               (Subscript 
                                                (Name exp Local)
                                                (Int 2))))))
                                          (If 
                                           (BinOp:In 
                                            (Subscript 
                                             (Name exp Local)
                                             (Int 0))
                                            (Array 
                                             (Symbol opassign)))
                                           (Block 
                                            (Assign 
                                             (Name operation Local)
                                             (Call convert
                                              (args: 
                                               (Array 
                                                (Symbol binary)
                                                (Subscript 
                                                 (Name exp Local)
                                                 (Int 1))
                                                (Subscript 
                                                 (Subscript 
                                                  (Subscript 
                                                   (Name exp Local)
                                                   (Int 2))
                                                  (Int 1))
                                                 (Array 
                                                  (Int 0)
                                                  (UnaryOp:Sub 
                                                   (Int 2))))
                                                (Subscript 
                                                 (Name exp Local)
                                                 (Int 3))))))
                                            (Dict  
                                             (Symbol type)
                                              (Symbol assign)
                                             (Symbol target)
                                              (Call convert
                                               (args: 
                                                (Subscript 
                                                 (Name exp Local)
                                                 (Int 1))))
                                             (Symbol value)
                                              (Name operation Local)))
                                           (If 
                                            (BinOp:In 
                                             (Subscript 
                                              (Name exp Local)
                                              (Int 0))
                                             (Array 
                                              (Symbol dot2)
                                              (Symbol dot3)))
                                            (Block 
                                             (Dict  
                                              (Symbol type)
                                               (Subscript 
                                                (Name exp Local)
                                                (Int 0))
                                              (Symbol from)
                                               (Call convert
                                                (args: 
                                                 (Subscript 
                                                  (Name exp Local)
                                                  (Int 1))))
                                              (Symbol to)
                                               (Call convert
                                                (args: 
                                                 (Subscript 
                                                  (Name exp Local)
                                                  (Int 2))))))
                                            (If 
                                             (BinOp:In 
                                              (Subscript 
                                               (Name exp Local)
                                               (Int 0))
                                              (Array 
                                               (Symbol alias)
                                               (Symbol var_alias)))
                                             (Block 
                                              (Dict  
                                               (Symbol type)
                                                (Symbol assign)
                                               (Symbol target)
                                                (Call convert
                                                 (args: 
                                                  (Subscript 
                                                   (Name exp Local)
                                                   (Int 1))))
                                               (Symbol value)
                                                (Call convert
                                                 (args: 
                                                  (Subscript 
                                                   (Name exp Local)
                                                   (Int 2))))))
                                             (If 
                                              (BinOp:In 
                                               (Subscript 
                                                (Name exp Local)
                                                (Int 0))
                                               (Array 
                                                (Symbol undef)))
                                              (Block 
                                               (Dict  
                                                (Symbol type)
                                                 (Symbol undef)
                                                (Symbol names)
                                                 (Call convert_array
                                                  (args: 
                                                   (Subscript 
                                                    (Name exp Local)
                                                    (Int 1))))))
                                              (If 
                                               (BinOp:In 
                                                (Subscript 
                                                 (Name exp Local)
                                                 (Int 0))
                                                (Array 
                                                 (Symbol if)
                                                 (Symbol if_mod)
                                                 (Symbol elsif)
                                                 (Symbol ifop)))
                                               (Block 
                                                (Assign 
                                                 (Name ret Local)
                                                 (Dict  
                                                  (Symbol type)
                                                   (Symbol if)
                                                  (Symbol test)
                                                   (Call convert
                                                    (args: 
                                                     (Subscript 
                                                      (Name exp Local)
                                                      (Int 1))))
                                                  (Symbol body)
                                                   (Call convert
                                                    (args: 
                                                     (Subscript 
                                                      (Name exp Local)
                                                      (Int 2))))))
                                                (If 
                                                 (Subscript 
                                                  (Name exp Local)
                                                  (Int 3))
                                                 (Block 
                                                  (Assign 
                                                   (Subscript 
                                                    (Name ret Local)
                                                    (Symbol else))
                                                   (Call convert
                                                    (args: 
                                                     (Subscript 
                                                      (Name exp Local)
                                                      (Int 3))))))
                                                 (Nil))
                                                (If 
                                                 (BinOp:Equal 
                                                  (Subscript 
                                                   (Name exp Local)
                                                   (Int 0))
                                                  (Symbol if_mod))
                                                 (Block 
                                                  (Assign 
                                                   (Subscript 
                                                    (Name ret Local)
                                                    (Symbol mod))
                                                   (Name true Local)))
                                                 (Nil))
                                                (Name ret Local))
                                               (If 
                                                (BinOp:In 
                                                 (Subscript 
                                                  (Name exp Local)
                                                  (Int 0))
                                                 (Array 
                                                  (Symbol case)))
                                                (Block 
                                                 (If 
                                                  (Subscript 
                                                   (Name exp Local)
                                                   (Int 1))
                                                  (Block 
                                                   (Assign 
                                                    (Name value Local)
                                                    (Call convert
                                                     (args: 
                                                      (Subscript 
                                                       (Name exp Local)
                                                       (Int 1))))))
                                                  (Block 
                                                   (Assign 
                                                    (Name value Local)
                                                    (Name nil Local))))
                                                 (Call convert_when
                                                  (args: 
                                                   (Subscript 
                                                    (Name exp Local)
                                                    (Int 2))
                                                   (Name value Local))))
                                                (If 
                                                 (BinOp:In 
                                                  (Subscript 
                                                   (Name exp Local)
                                                   (Int 0))
                                                  (Array 
                                                   (Symbol while)
                                                   (Symbol while_mod)))
                                                 (Block 
                                                  (If 
                                                   (BinOp:Equal 
                                                    (Subscript 
                                                     (Name exp Local)
                                                     (Int 0))
                                                    (Symbol while_mod))
                                                   (Block 
                                                    (Assign 
                                                     (Name mod Local)
                                                     (Name true Local)))
                                                   (Block 
                                                    (Assign 
                                                     (Name mod Local)
                                                     (Name false Local))))
                                                  (Dict  
                                                   (Symbol type)
                                                    (Symbol while)
                                                   (Symbol test)
                                                    (Call convert
                                                     (args: 
                                                      (Subscript 
                                                       (Name exp Local)
                                                       (Int 1))))
                                                   (Symbol body)
                                                    (Call convert
                                                     (args: 
                                                      (Subscript 
                                                       (Name exp Local)
                                                       (Int 2))))
                                                   (Symbol mod)
                                                    (Name mod Local)))
                                                 (If 
                                                  (BinOp:In 
                                                   (Subscript 
                                                    (Name exp Local)
                                                    (Int 0))
                                                   (Array 
                                                    (Symbol until)
                                                    (Symbol until_mod)))
                                                  (Block 
                                                   (If 
                                                    (BinOp:Equal 
                                                     (Subscript 
                                                      (Name exp Local)
                                                      (Int 0))
                                                     (Symbol until_mod))
                                                    (Block 
                                                     (Assign 
                                                      (Name mod Local)
                                                      (Name true Local)))
                                                    (Block 
                                                     (Assign 
                                                      (Name mod Local)
                                                      (Name false Local))))
                                                   (Dict  
                                                    (Symbol type)
                                                     (Symbol while)
                                                    (Symbol test)
                                                     (Call negate
                                                      (args: 
                                                       (Call convert
                                                        (args: 
                                                         (Subscript 
                                                          (Name exp Local)
                                                          (Int 1))))))
                                                    (Symbol body)
                                                     (Call convert
                                                      (args: 
                                                       (Subscript 
                                                        (Name exp Local)
                                                        (Int 2))))
                                                    (Symbol mod)
                                                     (Name mod Local)))
                                                  (If 
                                                   (BinOp:In 
                                                    (Subscript 
                                                     (Name exp Local)
                                                     (Int 0))
                                                    (Array 
                                                     (Symbol unless)
                                                     (Symbol unless_mod)))
                                                   (Block 
                                                    (If 
                                                     (BinOp:Equal 
                                                      (Subscript 
                                                       (Name exp Local)
                                                       (Int 0))
                                                      (Symbol unless_mod))
                                                     (Block 
                                                      (Assign 
                                                       (Name mod Local)
                                                       (Name true Local)))
                                                     (Block 
                                                      (Assign 
                                                       (Name mod Local)
                                                       (Name false Local))))
                                                    (Assign 
                                                     (Name ret Local)
                                                     (Dict  
                                                      (Symbol type)
                                                       (Symbol if)
                                                      (Symbol test)
                                                       (Call negate
                                                        (args: 
                                                         (Call convert
                                                          (args: 
                                                           (Subscript 
                                                            (Name exp Local)
                                                            (Int 1))))))
                                                      (Symbol body)
                                                       (Call convert
                                                        (args: 
                                                         (Subscript 
                                                          (Name exp Local)
                                                          (Int 2))))
                                                      (Symbol mod)
                                                       (Name mod Local)))
                                                    (If 
                                                     (Subscript 
                                                      (Name exp Local)
                                                      (Int 3))
                                                     (Block 
                                                      (Assign 
                                                       (Subscript 
                                                        (Name ret Local)
                                                        (Symbol else))
                                                       (Call convert
                                                        (args: 
                                                         (Subscript 
                                                          (Name exp Local)
                                                          (Int 3))))))
                                                     (Nil))
                                                    (Name ret Local))
                                                   (If 
                                                    (BinOp:In 
                                                     (Subscript 
                                                      (Name exp Local)
                                                      (Int 0))
                                                     (Array 
                                                      (Symbol for)))
                                                    (Block 
                                                     (Dict  
                                                      (Symbol type)
                                                       (Symbol for)
                                                      (Symbol target)
                                                       (Call convert
                                                        (args: 
                                                         (Subscript 
                                                          (Name exp Local)
                                                          (Int 1))))
                                                      (Symbol iter)
                                                       (Call convert
                                                        (args: 
                                                         (Subscript 
                                                          (Name exp Local)
                                                          (Int 2))))
                                                      (Symbol body)
                                                       (Call convert
                                                        (args: 
                                                         (Subscript 
                                                          (Name exp Local)
                                                          (Int 3))))))
                                                    (If 
                                                     (BinOp:In 
                                                      (Subscript 
                                                       (Name exp Local)
                                                       (Int 0))
                                                      (Array 
                                                       (Symbol begin)))
                                                     (Block 
                                                      (Assign 
                                                       (Name bodystmt Local)
                                                       (Subscript 
                                                        (Name exp Local)
                                                        (Int 1)))
                                                      (Dict  
                                                       (Symbol type)
                                                        (Symbol begin)
                                                       (Symbol body)
                                                        (Call convert
                                                         (args: 
                                                          (Subscript 
                                                           (Name bodystmt Local)
                                                           (Int 1))))
                                                       (Symbol rescue)
                                                        (Call convert
                                                         (args: 
                                                          (Subscript 
                                                           (Name bodystmt Local)
                                                           (Int 2))))
                                                       (Symbol else)
                                                        (Call convert
                                                         (args: 
                                                          (Subscript 
                                                           (Name bodystmt Local)
                                                           (Int 3))))
                                                       (Symbol ensure)
                                                        (Call convert
                                                         (args: 
                                                          (Subscript 
                                                           (Name bodystmt Local)
                                                           (Int 4))))))
                                                     (If 
                                                      (BinOp:In 
                                                       (Subscript 
                                                        (Name exp Local)
                                                        (Int 0))
                                                       (Array 
                                                        (Symbol rescue)))
                                                      (Block 
                                                       (Assign 
                                                        (Name ret Local)
                                                        (Dict  
                                                         (Symbol type)
                                                          (Symbol rescue)))
                                                       (If 
                                                        (Subscript 
                                                         (Name exp Local)
                                                         (Int 1))
                                                        (Block 
                                                         (If 
                                                          (Call 
                                                           (Attribute 
                                                            (Subscript 
                                                             (Subscript 
                                                              (Name exp Local)
                                                              (Int 1))
                                                             (Int 0))
                                                            (Name is_a? Local))
                                                           (args: 
                                                            (Name Array Local)))
                                                          (Block 
                                                           (Assign 
                                                            (Subscript 
                                                             (Name ret Local)
                                                             (Symbol exceptions))
                                                            (Call convert_array
                                                             (args: 
                                                              (Subscript 
                                                               (Name exp Local)
                                                               (Int 1))))))
                                                          (Block 
                                                           (Assign 
                                                            (Subscript 
                                                             (Name ret Local)
                                                             (Symbol expections))
                                                            (Subscript 
                                                             (Call convert
                                                              (args: 
                                                               (Subscript 
                                                                (Name exp Local)
                                                                (Int 1))))
                                                             (Symbol positional))))))
                                                        (Nil))
                                                       (If 
                                                        (Subscript 
                                                         (Name exp Local)
                                                         (Int 2))
                                                        (Block 
                                                         (Assign 
                                                          (Subscript 
                                                           (Name ret Local)
                                                           (Symbol binder))
                                                          (Call convert
                                                           (args: 
                                                            (Subscript 
                                                             (Name exp Local)
                                                             (Int 2))))))
                                                        (Nil))
                                                       (If 
                                                        (Subscript 
                                                         (Name exp Local)
                                                         (Int 3))
                                                        (Block 
                                                         (Assign 
                                                          (Subscript 
                                                           (Name ret Local)
                                                           (Symbol handler))
                                                          (Call convert
                                                           (args: 
                                                            (Subscript 
                                                             (Name exp Local)
                                                             (Int 3))))))
                                                        (Nil))
                                                       (If 
                                                        (Subscript 
                                                         (Name exp Local)
                                                         (Int 4))
                                                        (Block 
                                                         (Assign 
                                                          (Subscript 
                                                           (Name ret Local)
                                                           (Symbol else))
                                                          (Call convert
                                                           (args: 
                                                            (Subscript 
                                                             (Name exp Local)
                                                             (Int 4))))))
                                                        (Nil))
                                                       (Name ret Local))
                                                      (If 
                                                       (BinOp:In 
                                                        (Subscript 
                                                         (Name exp Local)
                                                         (Int 0))
                                                        (Array 
                                                         (Symbol rescue_mod)))
                                                       (Block 
                                                        (Dict  
                                                         (Symbol type)
                                                          (Symbol begin)
                                                         (Symbol body)
                                                          (Call convert
                                                           (args: 
                                                            (Subscript 
                                                             (Name exp Local)
                                                             (Int 1))))
                                                         (Symbol rescue)
                                                          (Call convert
                                                           (args: 
                                                            (Subscript 
                                                             (Name exp Local)
                                                             (Int 2))))
                                                         (Symbol mod)
                                                          (Name true Local)))
                                                       (If 
                                                        (BinOp:In 
                                                         (Subscript 
                                                          (Name exp Local)
                                                          (Int 0))
                                                         (Array 
                                                          (Symbol stmts_new)))
                                                        (Block 
                                                         (Dict  
                                                          (Symbol type)
                                                           (Symbol block)
                                                          (Symbol stmts)
                                                           (Array )))
                                                        (If 
                                                         (BinOp:In 
                                                          (Subscript 
                                                           (Name exp Local)
                                                           (Int 0))
                                                          (Array 
                                                           (Symbol stmts_add)))
                                                         (Block 
                                                          (Assign 
                                                           (Name block Local)
                                                           (Call convert
                                                            (args: 
                                                             (Subscript 
                                                              (Name exp Local)
                                                              (Int 1)))))
                                                          (Assign 
                                                           (Name stmt Local)
                                                           (Call convert
                                                            (args: 
                                                             (Subscript 
                                                              (Name exp Local)
                                                              (Int 2)))))
                                                          (Call 
                                                           (Attribute 
                                                            (Subscript 
                                                             (Name block Local)
                                                             (Symbol stmts))
                                                            (Name push Local))
                                                           (args: 
                                                            (Name stmt Local)))
                                                          (Name block Local))
                                                         (If 
                                                          (BinOp:In 
                                                           (Subscript 
                                                            (Name exp Local)
                                                            (Int 0))
                                                           (Array 
                                                            (Symbol bodystmt)))
                                                          (Block 
                                                           (Assign 
                                                            (Name block Local)
                                                            (Call convert
                                                             (args: 
                                                              (Subscript 
                                                               (Name exp Local)
                                                               (Int 1)))))
                                                           (If 
                                                            (Subscript 
                                                             (Name exp Local)
                                                             (Int 2))
                                                            (Block 
                                                             (Assign 
                                                              (Name res Local)
                                                              (Call convert
                                                               (args: 
                                                                (Subscript 
                                                                 (Name exp Local)
                                                                 (Int 2)))))
                                                             (Call 
                                                              (Attribute 
                                                               (Subscript 
                                                                (Name block Local)
                                                                (Symbol stmts))
                                                               (Name push Local))
                                                              (args: 
                                                               (Name res Local))))
                                                            (Nil))
                                                           (Name block Local))
                                                          (If 
                                                           (BinOp:In 
                                                            (Subscript 
                                                             (Name exp Local)
                                                             (Int 0))
                                                            (Array 
                                                             (Symbol binary)))
                                                           (Block 
                                                            (Dict  
                                                             (Symbol type)
                                                              (Symbol binary)
                                                             (Symbol left)
                                                              (Call convert
                                                               (args: 
                                                                (Subscript 
                                                                 (Name exp Local)
                                                                 (Int 1))))
                                                             (Symbol op)
                                                              (Call op
                                                               (args: 
                                                                (Subscript 
                                                                 (Name exp Local)
                                                                 (Int 2))))
                                                             (Symbol right)
                                                              (Call convert
                                                               (args: 
                                                                (Subscript 
                                                                 (Name exp Local)
                                                                 (Int 3))))))
                                                           (If 
                                                            (BinOp:In 
                                                             (Subscript 
                                                              (Name exp Local)
                                                              (Int 0))
                                                             (Array 
                                                              (Symbol array)))
                                                            (Block 
                                                             (Assign 
                                                              (Name args Local)
                                                              (Call convert
                                                               (args: 
                                                                (Subscript 
                                                                 (Name exp Local)
                                                                 (Int 1)))))
                                                             (Dict  
                                                              (Symbol type)
                                                               (Symbol array)
                                                              (Symbol elts)
                                                               (Subscript 
                                                                (Name args Local)
                                                                (Symbol positional))))
                                                            (If 
                                                             (BinOp:In 
                                                              (Subscript 
                                                               (Name exp Local)
                                                               (Int 0))
                                                              (Array 
                                                               (Symbol aref)
                                                               (Symbol aref_field)))
                                                             (Block 
                                                              (Assign 
                                                               (Name args Local)
                                                               (Call convert
                                                                (args: 
                                                                 (Subscript 
                                                                  (Name exp Local)
                                                                  (Int 2)))))
                                                              (Dict  
                                                               (Symbol type)
                                                                (Symbol subscript)
                                                               (Symbol value)
                                                                (Call convert
                                                                 (args: 
                                                                  (Subscript 
                                                                   (Name exp Local)
                                                                   (Int 1))))
                                                               (Symbol slice)
                                                                (Subscript 
                                                                 (Name args Local)
                                                                 (Symbol positional))))
                                                             (If 
                                                              (BinOp:In 
                                                               (Subscript 
                                                                (Name exp Local)
                                                                (Int 0))
                                                               (Array 
                                                                (Symbol unary)))
                                                              (Block 
                                                               (Dict  
                                                                (Symbol type)
                                                                 (Symbol unary)
                                                                (Symbol op)
                                                                 (Call op
                                                                  (args: 
                                                                   (Subscript 
                                                                    (Name exp Local)
                                                                    (Int 1))))
                                                                (Symbol operand)
                                                                 (Call convert
                                                                  (args: 
                                                                   (Subscript 
                                                                    (Name exp Local)
                                                                    (Int 2))))))
                                                              (If 
                                                               (BinOp:In 
                                                                (Subscript 
                                                                 (Name exp Local)
                                                                 (Int 0))
                                                                (Array 
                                                                 (Symbol int)))
                                                               (Block 
                                                                (Dict  
                                                                 (Symbol type)
                                                                  (Symbol int)
                                                                 (Symbol value)
                                                                  (Subscript 
                                                                   (Name exp Local)
                                                                   (Int 1))
                                                                 (Symbol location)
                                                                  (Subscript 
                                                                   (Name exp Local)
                                                                   (Int 2))))
                                                               (If 
                                                                (BinOp:In 
                                                                 (Subscript 
                                                                  (Name exp Local)
                                                                  (Int 0))
                                                                 (Array 
                                                                  (Symbol float)))
                                                                (Block 
                                                                 (Dict  
                                                                  (Symbol type)
                                                                   (Symbol float)
                                                                  (Symbol value)
                                                                   (Subscript 
                                                                    (Name exp Local)
                                                                    (Int 1))
                                                                  (Symbol location)
                                                                   (Subscript 
                                                                    (Name exp Local)
                                                                    (Int 2))))
                                                                (If 
                                                                 (BinOp:In 
                                                                  (Subscript 
                                                                   (Name exp Local)
                                                                   (Int 0))
                                                                  (Array 
                                                                   (Symbol regexp_literal)))
                                                                 (Block 
                                                                  (Assign 
                                                                   (Name regexp Local)
                                                                   (Call convert
                                                                    (args: 
                                                                     (Subscript 
                                                                      (Name exp Local)
                                                                      (Int 1)))))
                                                                  (Assign 
                                                                   (Subscript 
                                                                    (Name regexp Local)
                                                                    (Symbol regexp_end))
                                                                   (Call convert
                                                                    (args: 
                                                                     (Subscript 
                                                                      (Name exp Local)
                                                                      (Int 2)))))
                                                                  (Name regexp Local))
                                                                 (If 
                                                                  (BinOp:In 
                                                                   (Subscript 
                                                                    (Name exp Local)
                                                                    (Int 0))
                                                                   (Array 
                                                                    (Symbol regexp_new)))
                                                                  (Block 
                                                                   (Dict  
                                                                    (Symbol type)
                                                                     (Symbol regexp)))
                                                                  (If 
                                                                   (BinOp:In 
                                                                    (Subscript 
                                                                     (Name exp Local)
                                                                     (Int 0))
                                                                    (Array 
                                                                     (Symbol regexp_add)))
                                                                   (Block 
                                                                    (Dict  
                                                                     (Symbol type)
                                                                      (Symbol regexp)
                                                                     (Symbol pattern)
                                                                      (Call convert
                                                                       (args: 
                                                                        (Subscript 
                                                                         (Name exp Local)
                                                                         (Int 2))))))
                                                                   (If 
                                                                    (BinOp:In 
                                                                     (Subscript 
                                                                      (Name exp Local)
                                                                      (Int 0))
                                                                     (Array 
                                                                      (Symbol regexp_end)))
                                                                    (Block 
                                                                     (Call make_string
                                                                      (args: 
                                                                       (Subscript 
                                                                        (Name exp Local)
                                                                        (Int 1))
                                                                       (Subscript 
                                                                        (Name exp Local)
                                                                        (Int 2)))))
                                                                    (If 
                                                                     (BinOp:In 
                                                                      (Subscript 
                                                                       (Name exp Local)
                                                                       (Int 0))
                                                                      (Array 
                                                                       (Symbol backref)))
                                                                     (Block 
                                                                      (Call make_string
                                                                       (args: 
                                                                        (Subscript 
                                                                         (Name exp Local)
                                                                         (Int 1))
                                                                        (Subscript 
                                                                         (Name exp Local)
                                                                         (Int 2)))))
                                                                     (If 
                                                                      (BinOp:In 
                                                                       (Subscript 
                                                                        (Name exp Local)
                                                                        (Int 0))
                                                                       (Array 
                                                                        (Symbol tstring_content)
                                                                        (Symbol CHAR)))
                                                                      (Block 
                                                                       (Call make_string
                                                                        (args: 
                                                                         (Subscript 
                                                                          (Name exp Local)
                                                                          (Int 1))
                                                                         (Subscript 
                                                                          (Name exp Local)
                                                                          (Int 2)))))
                                                                      (If 
                                                                       (BinOp:In 
                                                                        (Subscript 
                                                                         (Name exp Local)
                                                                         (Int 0))
                                                                        (Array 
                                                                         (Symbol string_content)
                                                                         (Symbol xstring_new)))
                                                                       (Block 
                                                                        (Call make_string
                                                                         (args: 
                                                                          (String ))))
                                                                       (If 
                                                                        (BinOp:In 
                                                                         (Subscript 
                                                                          (Name exp Local)
                                                                          (Int 0))
                                                                         (Array 
                                                                          (Symbol string_add)
                                                                          (Symbol xstring_add)
                                                                          (Symbol qwords_add)))
                                                                        (Block 
                                                                         (If 
                                                                          (BinOp:Or 
                                                                           (BinOp:Or 
                                                                            (UnaryOp:Not 
                                                                             (Subscript 
                                                                              (Name exp Local)
                                                                              (Int 1)))
                                                                            (BinOp:Equal 
                                                                             (Subscript 
                                                                              (Name exp Local)
                                                                              (Int 1))
                                                                             (Array 
                                                                              (Symbol string_content))))
                                                                           (BinOp:Equal 
                                                                            (Subscript 
                                                                             (Name exp Local)
                                                                             (Int 1))
                                                                            (Array 
                                                                             (Symbol xstring_new))))
                                                                          (Block 
                                                                           (Call convert
                                                                            (args: 
                                                                             (Subscript 
                                                                              (Name exp Local)
                                                                              (Int 2)))))
                                                                          (Block 
                                                                           (Dict  
                                                                            (Symbol type)
                                                                             (Symbol binary)
                                                                            (Symbol op)
                                                                             (Call op
                                                                              (args: 
                                                                               (Symbol +)))
                                                                            (Symbol left)
                                                                             (Call convert
                                                                              (args: 
                                                                               (Subscript 
                                                                                (Name exp Local)
                                                                                (Int 1))))
                                                                            (Symbol right)
                                                                             (Call convert
                                                                              (args: 
                                                                               (Subscript 
                                                                                (Name exp Local)
                                                                                (Int 2))))))))
                                                                        (If 
                                                                         (BinOp:In 
                                                                          (Subscript 
                                                                           (Name exp Local)
                                                                           (Int 0))
                                                                          (Array 
                                                                           (Symbol string_concat)
                                                                           (Symbol xstring_concat)))
                                                                         (Block 
                                                                          (Call convert
                                                                           (args: 
                                                                            (Array 
                                                                             (Symbol binary)
                                                                             (Subscript 
                                                                              (Name exp Local)
                                                                              (Int 1))
                                                                             (Symbol +)
                                                                             (Subscript 
                                                                              (Name exp Local)
                                                                              (Int 2))))))
                                                                         (If 
                                                                          (BinOp:In 
                                                                           (Subscript 
                                                                            (Name exp Local)
                                                                            (Int 0))
                                                                           (Array 
                                                                            (Symbol hash)))
                                                                          (Block 
                                                                           (If 
                                                                            (Subscript 
                                                                             (Name exp Local)
                                                                             (Int 1))
                                                                            (Block 
                                                                             (Call convert
                                                                              (args: 
                                                                               (Subscript 
                                                                                (Name exp Local)
                                                                                (Int 1)))))
                                                                            (Block 
                                                                             (Dict  
                                                                              (Symbol type)
                                                                               (Symbol hash)))))
                                                                          (If 
                                                                           (BinOp:In 
                                                                            (Subscript 
                                                                             (Name exp Local)
                                                                             (Int 0))
                                                                            (Array 
                                                                             (Symbol assoclist_from_args)
                                                                             (Symbol bare_assoc_hash)))
                                                                           (Block 
                                                                            (Dict  
                                                                             (Symbol type)
                                                                              (Symbol hash)
                                                                             (Symbol entries)
                                                                              (Call convert_array
                                                                               (args: 
                                                                                (Subscript 
                                                                                 (Name exp Local)
                                                                                 (Int 1))))))
                                                                           (If 
                                                                            (BinOp:In 
                                                                             (Subscript 
                                                                              (Name exp Local)
                                                                              (Int 0))
                                                                             (Array 
                                                                              (Symbol assoc_new)))
                                                                            (Block 
                                                                             (Dict  
                                                                              (Symbol type)
                                                                               (Symbol assoc)
                                                                              (Symbol key)
                                                                               (Call convert
                                                                                (args: 
                                                                                 (Subscript 
                                                                                  (Name exp Local)
                                                                                  (Int 1))))
                                                                              (Symbol value)
                                                                               (Call convert
                                                                                (args: 
                                                                                 (Subscript 
                                                                                  (Name exp Local)
                                                                                  (Int 2))))))
                                                                            (If 
                                                                             (BinOp:In 
                                                                              (Subscript 
                                                                               (Name exp Local)
                                                                               (Int 0))
                                                                              (Array 
                                                                               (Symbol const_path_ref)
                                                                               (Symbol const_path_field)))
                                                                             (Block 
                                                                              (Dict  
                                                                               (Symbol type)
                                                                                (Symbol attribute)
                                                                               (Symbol value)
                                                                                (Call convert
                                                                                 (args: 
                                                                                  (Subscript 
                                                                                   (Name exp Local)
                                                                                   (Int 1))))
                                                                               (Symbol attr)
                                                                                (Call convert
                                                                                 (args: 
                                                                                  (Subscript 
                                                                                   (Name exp Local)
                                                                                   (Int 2))))))
                                                                             (If 
                                                                              (BinOp:In 
                                                                               (Subscript 
                                                                                (Name exp Local)
                                                                                (Int 0))
                                                                               (Array 
                                                                                (Symbol field)))
                                                                              (Block 
                                                                               (Dict  
                                                                                (Symbol type)
                                                                                 (Symbol attribute)
                                                                                (Symbol value)
                                                                                 (Call convert
                                                                                  (args: 
                                                                                   (Subscript 
                                                                                    (Name exp Local)
                                                                                    (Int 1))))
                                                                                (Symbol attr)
                                                                                 (Call convert
                                                                                  (args: 
                                                                                   (Subscript 
                                                                                    (Name exp Local)
                                                                                    (Int 3))))))
                                                                              (If 
                                                                               (BinOp:In 
                                                                                (Subscript 
                                                                                 (Name exp Local)
                                                                                 (Int 0))
                                                                                (Array 
                                                                                 (Symbol void_stmt)))
                                                                               (Block 
                                                                                (Dict  
                                                                                 (Symbol type)
                                                                                  (Symbol void)))
                                                                               (If 
                                                                                (BinOp:In 
                                                                                 (Subscript 
                                                                                  (Name exp Local)
                                                                                  (Int 0))
                                                                                 (Array 
                                                                                  (Symbol yield0)))
                                                                                (Block 
                                                                                 (Dict  
                                                                                  (Symbol type)
                                                                                   (Symbol yield)))
                                                                                (If 
                                                                                 (BinOp:In 
                                                                                  (Subscript 
                                                                                   (Name exp Local)
                                                                                   (Int 0))
                                                                                  (Array 
                                                                                   (Symbol return0)))
                                                                                 (Block 
                                                                                  (Dict  
                                                                                   (Symbol type)
                                                                                    (Symbol return)))
                                                                                 (If 
                                                                                  (BinOp:In 
                                                                                   (Subscript 
                                                                                    (Name exp Local)
                                                                                    (Int 0))
                                                                                   (Array 
                                                                                    (Symbol break)))
                                                                                  (Block 
                                                                                   (Dict  
                                                                                    (Symbol type)
                                                                                     (Symbol break)))
                                                                                  (If 
                                                                                   (BinOp:In 
                                                                                    (Subscript 
                                                                                     (Name exp Local)
                                                                                     (Int 0))
                                                                                    (Array 
                                                                                     (Symbol retry)))
                                                                                   (Block 
                                                                                    (Dict  
                                                                                     (Symbol type)
                                                                                      (Symbol retry)))
                                                                                   (If 
                                                                                    (BinOp:In 
                                                                                     (Subscript 
                                                                                      (Name exp Local)
                                                                                      (Int 0))
                                                                                     (Array 
                                                                                      (Symbol redo)))
                                                                                    (Block 
                                                                                     (Dict  
                                                                                      (Symbol type)
                                                                                       (Symbol redo)))
                                                                                    (If 
                                                                                     (BinOp:In 
                                                                                      (Subscript 
                                                                                       (Name exp Local)
                                                                                       (Int 0))
                                                                                      (Array 
                                                                                       (Symbol defined)))
                                                                                     (Block 
                                                                                      (Dict  
                                                                                       (Symbol type)
                                                                                        (Symbol unary)
                                                                                       (Symbol op)
                                                                                        (Call op
                                                                                         (args: 
                                                                                          (Symbol defined)))
                                                                                       (Symbol operand)
                                                                                        (Call convert
                                                                                         (args: 
                                                                                          (Subscript 
                                                                                           (Name exp Local)
                                                                                           (Int 1))))))
                                                                                     (If 
                                                                                      (BinOp:In 
                                                                                       (Subscript 
                                                                                        (Name exp Local)
                                                                                        (Int 0))
                                                                                       (Array 
                                                                                        (Symbol return)
                                                                                        (Symbol yield)))
                                                                                      (Block 
                                                                                       (Dict  
                                                                                        (Symbol type)
                                                                                         (Subscript 
                                                                                          (Name exp Local)
                                                                                          (Int 0))
                                                                                        (Symbol value)
                                                                                         (Call args_to_array
                                                                                          (args: 
                                                                                           (Call convert
                                                                                            (args: 
                                                                                             (Subscript 
                                                                                              (Name exp Local)
                                                                                              (Int 1))))))))
                                                                                      (If 
                                                                                       (BinOp:In 
                                                                                        (Subscript 
                                                                                         (Name exp Local)
                                                                                         (Int 0))
                                                                                        (Array 
                                                                                         (Symbol string_embexpr)))
                                                                                       (Block 
                                                                                        (Dict  
                                                                                         (Symbol type)
                                                                                          (Symbol string_embexpr)
                                                                                         (Symbol value)
                                                                                          (Call convert
                                                                                           (args: 
                                                                                            (Subscript 
                                                                                             (Name exp Local)
                                                                                             (Int 1))))))
                                                                                       (If 
                                                                                        (BinOp:In 
                                                                                         (Subscript 
                                                                                          (Name exp Local)
                                                                                          (Int 0))
                                                                                         (Array 
                                                                                          (Symbol var_ref)
                                                                                          (Symbol var_field)
                                                                                          (Symbol const_ref)
                                                                                          (Symbol top_const_ref)
                                                                                          (Symbol top_const_field)
                                                                                          (Symbol paren)
                                                                                          (Symbol else)
                                                                                          (Symbol ensure)
                                                                                          (Symbol arg_paren)
                                                                                          (Symbol mlhs_paren)
                                                                                          (Symbol rest_param)
                                                                                          (Symbol blockarg)
                                                                                          (Symbol symbol_literal)
                                                                                          (Symbol regexp_literal)
                                                                                          (Symbol param_error)
                                                                                          (Symbol string_literal)
                                                                                          (Symbol xstring_literal)
                                                                                          (Symbol string_dvar)
                                                                                          (Symbol mrhs_new_from_args)
                                                                                          (Symbol assoc_splat)
                                                                                          (Symbol next)
                                                                                          (Symbol END)
                                                                                          (Symbol BEGIN)))
                                                                                        (Block 
                                                                                         (Call convert
                                                                                          (args: 
                                                                                           (Subscript 
                                                                                            (Name exp Local)
                                                                                            (Int 1)))))
                                                                                        (Block 
                                                                                         (Call banner
                                                                                          (args: 
                                                                                           (String unknown)))
                                                                                         (Call puts
                                                                                          (args: 
                                                                                           (StrEmb
                                                                                             (Block 
                                                                                              (Name exp Local)))))
                                                                                         (Name exp Local))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    (Func convert_array
     (args: 
      (Name arr Local))
     (body: 
      (Block 
       (Call 
        (Attribute 
         (Name arr Local)
         (Name map Local))
        (block_arg: 
         (Func lambda%8
          (args: 
           (Name x Local))
          (body: 
           (Block 
            (Call convert
             (args: 
              (Name x Local)))))))))))
    (Func convert_when
     (args: 
      (Name exp Local)
      (Name value Local))
     (body: 
      (Block 
       (If 
        (BinOp:Equal 
         (Subscript 
          (Name exp Local)
          (Int 0))
         (Symbol when))
        (Block 
         (If 
          (Name value Local)
          (Block 
           (Assign 
            (Name test Local)
            (Dict  
             (Symbol type)
              (Symbol binary)
             (Symbol op)
              (Call op
               (args: 
                (Symbol in)))
             (Symbol left)
              (Name value Local)
             (Symbol right)
              (Call args_to_array
               (args: 
                (Call convert
                 (args: 
                  (Subscript 
                   (Name exp Local)
                   (Int 1)))))))))
          (Block 
           (Assign 
            (Name test Local)
            (Call args_to_array
             (args: 
              (Call convert
               (args: 
                (Subscript 
                 (Name exp Local)
                 (Int 1)))))))))
         (Assign 
          (Name ret Local)
          (Dict  
           (Symbol type)
            (Symbol if)
           (Symbol test)
            (Name test Local)
           (Symbol body)
            (Call convert
             (args: 
              (Subscript 
               (Name exp Local)
               (Int 2))))))
         (If 
          (Subscript 
           (Name exp Local)
           (Int 3))
          (Block 
           (Assign 
            (Subscript 
             (Name ret Local)
             (Symbol else))
            (Call convert_when
             (args: 
              (Subscript 
               (Name exp Local)
               (Int 3))
              (Name value Local)))))
          (Nil))
         (Name ret Local))
        (If 
         (BinOp:Equal 
          (Subscript 
           (Name exp Local)
           (Int 0))
          (Symbol else))
         (Block 
          (Call convert
           (args: 
            (Subscript 
             (Name exp Local)
             (Int 1)))))
         (Nil))))))
    (Func args_to_array
     (args: 
      (Name args Local))
     (body: 
      (Block 
       (If 
        (BinOp:Equal 
         (Subscript 
          (Name args Local)
          (Symbol type))
         (Symbol args))
        (Block 
         (Dict  
          (Symbol type)
           (Symbol array)
          (Symbol elts)
           (Subscript 
            (Name args Local)
            (Symbol positional))))
        (Block 
         (Name args Local))))))
    (Func make_string
     (args: 
      (Name content Local)
      (Name location Local))
     (body: 
      (Block 
       (Assign 
        (Name ret Local)
        (Dict  
         (Symbol type)
          (Symbol string)
         (Symbol id)
          (Call 
           (Attribute 
            (Name content Local)
            (Name force_encoding Local))
           (args: 
            (String utf-8)))))
       (If 
        (Name location Local)
        (Block 
         (Assign 
          (Subscript 
           (Name ret Local)
           (Symbol location))
          (Name location Local)))
        (Nil))
       (Name ret Local))))
    (Func op
     (args: 
      (Name name Local))
     (body: 
      (Block 
       (Dict  
        (Symbol type)
         (Symbol op)
        (Symbol name)
         (Name name Local)))))
    (Func negate
     (args: 
      (Name exp Local))
     (body: 
      (Block 
       (Dict  
        (Symbol type)
         (Symbol unary)
        (Symbol op)
         (Call op
          (args: 
           (Symbol not)))
        (Symbol operand)
         (Name exp Local)))))))
 (Func hash_max_nest
  (args: 
   (Name hash Local))
  (body: 
   (Block 
    (If 
     (Call 
      (Attribute 
       (Name hash Local)
       (Name is_a? Local))
      (args: 
       (Name Array Local)))
     (Block 
      (BinOp:Add 
       (Call 
        (Attribute 
         (Call 
          (Attribute 
           (Call 
            (Attribute 
             (Name hash Local)
             (Name map Local))
            (block_arg: 
             (Func lambda%9
              (args: 
               (Name e Local))
              (body: 
               (Block 
                (Call 
                 (Attribute 
                  (Call hash_max_nest
                   (args: 
                    (Name e Local)))
                  (Name to_i Local))))))))
           (Name max Local)))
         (Name to_i Local)))
       (Int 1)))
     (If 
      (Call 
       (Attribute 
        (Name hash Local)
        (Name is_a? Local))
       (args: 
        (Name Hash Local)))
      (Block 
       (BinOp:Add 
        (Call 
         (Attribute 
          (Call 
           (Attribute 
            (Call 
             (Attribute 
              (Call 
               (Attribute 
                (Name hash Local)
                (Name values Local)))
              (Name map Local))
             (block_arg: 
              (Func lambda%10
               (args: 
                (Name s Local))
               (body: 
                (Block 
                 (Call 
                  (Attribute 
                   (Call hash_max_nest
                    (args: 
                     (Name s Local)))
                   (Name to_i Local))))))))
            (Name max Local)))
          (Name to_i Local)))
        (Int 1)))
      (Block 
       (Int 0)))))))
 (Func parse_dump
  (args: 
   (Name input Local)
   (Name output Local)
   (Name endmark Local))
  (body: 
   (Block 
    (Try 
     (Block 
      (Assign 
       (Name simplifier Local)
       (Call 
        (Attribute 
         (Name AstSimplifier Local)
         (Name new Local))
        (args: 
         (Name input Local))))
      (Assign 
       (Name hash Local)
       (Call 
        (Attribute 
         (Name simplifier Local)
         (Name simplify Local))))
      (Assign 
       (Name json_string Local)
       (Call 
        (Attribute 
         (Name JSON Local)
         (Name pretty_generate Local))
        (args: 
         (Name hash Local)
         (Dict  
          (Name max_nesting Local)
           (Call hash_max_nest
            (args: 
             (Name hash Local)))))))
      (Assign 
       (Name out Local)
       (Call 
        (Attribute 
         (Name File Local)
         (Name open Local))
        (args: 
         (Name output Local)
         (String wb))))
      (Call 
       (Attribute 
        (Name out Local)
        (Name write Local))
       (args: 
        (Name json_string Local)))
      (Call 
       (Attribute 
        (Name out Local)
        (Name close Local))))
     (Nil)
     (Nil)
     (Block 
      (Assign 
       (Name end_file Local)
       (Call 
        (Attribute 
         (Name File Local)
         (Name open Local))
        (args: 
         (Name endmark Local)
         (String wb))))
      (Call 
       (Attribute 
        (Name end_file Local)
        (Name close Local))))))))
 (Assign 
  (Name $options Global)
  (Dict  ))
 (Call 
  (Attribute 
   (Call 
    (Attribute 
     (Name OptionParser Local)
     (Name new Local))
    (block_arg: 
     (Func lambda%12
      (args: 
       (Name opts Local))
      (body: 
       (Block 
        (Assign 
         (Attribute 
          (Name opts Local)
          (Name banner Local))
         (String Usage: dump.rb [options]))
        (Call 
         (Attribute 
          (Name opts Local)
          (Name on Local))
         (args: 
          (String -d)
          (String --debug)
          (String debug run))
         (block_arg: 
          (Func lambda%11
           (args: 
            (Name v Local))
           (body: 
            (Block 
             (Assign 
              (Subscript 
               (Name $options Global)
               (Symbol debug))
              (Name v Local))))))))))))
   (Name parse! Local)))
 (If 
  (BinOp:Gt 
   (Call 
    (Attribute 
     (Name ARGV Local)
     (Name length Local)))
   (Int 0))
  (Block 
   (Call parse_dump
    (args: 
     (Subscript 
      (Name ARGV Local)
      (Int 0))
     (Subscript 
      (Name ARGV Local)
      (Int 1))
     (Subscript 
      (Name ARGV Local)
      (Int 2)))))
  (Nil)))

----------------------------------------

bind: hash_max_nest ty:  Fn [] => Int_ty
bind: AstSimplifier ty: Class_ty: AstSimplifier
  bind: make_string ty:  Fn [Unkown_ty] => Unkown_ty
  bind: convert ty:  Fn [] => Unkown_ty
  bind: negate ty:  Fn [] => Unkown_ty
  bind: args_to_array ty:  Fn [] => Unkown_ty
  bind: convert_array ty:  Fn [] => Unkown_ty
  bind: ident_end ty:  Fn [] => Int_ty
  bind: find_locations ty:  Fn [] => Unkown_ty
  bind: detect_encoding ty:  Fn [] => Unkown_ty
  bind: filename ty: Unkown_ty
  bind: find_line_starts ty:  Fn [] => Unkown_ty
  bind: docs ty: Unkown_ty
  bind: src ty: Unkown_ty
  bind: simplify ty:  Fn [] => Unkown_ty
  bind: node_start ty:  Fn [] => Unkown_ty
  bind: line_starts ty: [Int_ty]
  bind: convert_when ty:  Fn [] => Unkown_ty
  bind: find_docs ty:  Fn [] => Unkown_ty
  bind: op ty:  Fn [] => Unkown_ty
  bind: initialize ty:  Fn [] => Unkown_ty
bind: $options ty: Unkown_ty
bind: parse_dump ty:  Fn [] => Unkown_ty
bind: lambda%12 ty:  Fn [] => Unkown_ty
bind: banner ty:  Fn [] => Unkown_ty


----------------------------------------

unvisited variable ./tests/dump.rb(172) : end_line
unvisited variable ./tests/dump.rb(167) : start_line
unvisited variable ./tests/dump.rb(159) : start_line
unvisited variable ./tests/dump.rb(160) : end_line
